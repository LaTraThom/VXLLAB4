
lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f88  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003094  08003094  00013094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030b8  080030b8  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  080030b8  080030b8  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030b8  080030b8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030b8  080030b8  000130b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030bc  080030bc  000130bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080030c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a4  20000088  08003148  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  08003148  0002042c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a1d0  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d86  00000000  00000000  0002a281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  0002c008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  0002cac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000173d2  00000000  00000000  0002d458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d075  00000000  00000000  0004482a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008291e  00000000  00000000  0005189f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d41bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000299c  00000000  00000000  000d4210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	0800307c 	.word	0x0800307c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	0800307c 	.word	0x0800307c

0800014c <isButton2Pressed>:
		return 1;
	}
	return 0;
}

int isButton2Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton2Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton2Pressed+0x16>
		button2_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton2Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton2Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	200000a8 	.word	0x200000a8

08000170 <isButton3Pressed>:
		return 1;
	}
	return 0;
}

int isButton3Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton3Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton3Pressed+0x16>
		button3_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton3Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton3Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	200000ac 	.word	0x200000ac

08000194 <subKeyProcess>:
		return 1;
	}
	return 0;
}

void subKeyProcess(int button_id){
 8000194:	b480      	push	{r7}
 8000196:	b083      	sub	sp, #12
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
	//TODO
    switch (button_id) {
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	2b03      	cmp	r3, #3
 80001a0:	d011      	beq.n	80001c6 <subKeyProcess+0x32>
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	2b03      	cmp	r3, #3
 80001a6:	dc12      	bgt.n	80001ce <subKeyProcess+0x3a>
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	2b01      	cmp	r3, #1
 80001ac:	d003      	beq.n	80001b6 <subKeyProcess+0x22>
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	2b02      	cmp	r3, #2
 80001b2:	d004      	beq.n	80001be <subKeyProcess+0x2a>
            break;
        case 3:
            button3_flag = 1;
            break;
        default:
            break;
 80001b4:	e00b      	b.n	80001ce <subKeyProcess+0x3a>
            button1_flag = 1;
 80001b6:	4b09      	ldr	r3, [pc, #36]	; (80001dc <subKeyProcess+0x48>)
 80001b8:	2201      	movs	r2, #1
 80001ba:	601a      	str	r2, [r3, #0]
            break;
 80001bc:	e008      	b.n	80001d0 <subKeyProcess+0x3c>
            button2_flag = 1;
 80001be:	4b08      	ldr	r3, [pc, #32]	; (80001e0 <subKeyProcess+0x4c>)
 80001c0:	2201      	movs	r2, #1
 80001c2:	601a      	str	r2, [r3, #0]
            break;
 80001c4:	e004      	b.n	80001d0 <subKeyProcess+0x3c>
            button3_flag = 1;
 80001c6:	4b07      	ldr	r3, [pc, #28]	; (80001e4 <subKeyProcess+0x50>)
 80001c8:	2201      	movs	r2, #1
 80001ca:	601a      	str	r2, [r3, #0]
            break;
 80001cc:	e000      	b.n	80001d0 <subKeyProcess+0x3c>
            break;
 80001ce:	bf00      	nop
    }
}
 80001d0:	bf00      	nop
 80001d2:	370c      	adds	r7, #12
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	200000a4 	.word	0x200000a4
 80001e0:	200000a8 	.word	0x200000a8
 80001e4:	200000ac 	.word	0x200000ac

080001e8 <getKeyInput>:

void getKeyInput(){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
    // Xử lý button 1
    KeyReg2_1 = KeyReg1_1;
 80001ec:	4b6b      	ldr	r3, [pc, #428]	; (800039c <getKeyInput+0x1b4>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4a6b      	ldr	r2, [pc, #428]	; (80003a0 <getKeyInput+0x1b8>)
 80001f2:	6013      	str	r3, [r2, #0]
    KeyReg1_1 = KeyReg0_1;
 80001f4:	4b6b      	ldr	r3, [pc, #428]	; (80003a4 <getKeyInput+0x1bc>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a68      	ldr	r2, [pc, #416]	; (800039c <getKeyInput+0x1b4>)
 80001fa:	6013      	str	r3, [r2, #0]
    KeyReg0_1 = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 80001fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000200:	4869      	ldr	r0, [pc, #420]	; (80003a8 <getKeyInput+0x1c0>)
 8000202:	f001 ff0f 	bl	8002024 <HAL_GPIO_ReadPin>
 8000206:	4603      	mov	r3, r0
 8000208:	461a      	mov	r2, r3
 800020a:	4b66      	ldr	r3, [pc, #408]	; (80003a4 <getKeyInput+0x1bc>)
 800020c:	601a      	str	r2, [r3, #0]

    if ((KeyReg1_1 == KeyReg0_1) && (KeyReg1_1 == KeyReg2_1)) {
 800020e:	4b63      	ldr	r3, [pc, #396]	; (800039c <getKeyInput+0x1b4>)
 8000210:	681a      	ldr	r2, [r3, #0]
 8000212:	4b64      	ldr	r3, [pc, #400]	; (80003a4 <getKeyInput+0x1bc>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	429a      	cmp	r2, r3
 8000218:	d12f      	bne.n	800027a <getKeyInput+0x92>
 800021a:	4b60      	ldr	r3, [pc, #384]	; (800039c <getKeyInput+0x1b4>)
 800021c:	681a      	ldr	r2, [r3, #0]
 800021e:	4b60      	ldr	r3, [pc, #384]	; (80003a0 <getKeyInput+0x1b8>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	429a      	cmp	r2, r3
 8000224:	d129      	bne.n	800027a <getKeyInput+0x92>
        if (KeyReg2_1 != KeyReg3_1) {
 8000226:	4b5e      	ldr	r3, [pc, #376]	; (80003a0 <getKeyInput+0x1b8>)
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	4b60      	ldr	r3, [pc, #384]	; (80003ac <getKeyInput+0x1c4>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	429a      	cmp	r2, r3
 8000230:	d00f      	beq.n	8000252 <getKeyInput+0x6a>
            KeyReg3_1 = KeyReg2_1;
 8000232:	4b5b      	ldr	r3, [pc, #364]	; (80003a0 <getKeyInput+0x1b8>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	4a5d      	ldr	r2, [pc, #372]	; (80003ac <getKeyInput+0x1c4>)
 8000238:	6013      	str	r3, [r2, #0]
            if (KeyReg3_1 == PRESSED_STATE) {
 800023a:	4b5c      	ldr	r3, [pc, #368]	; (80003ac <getKeyInput+0x1c4>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d11b      	bne.n	800027a <getKeyInput+0x92>
                TimeOutForKeyPress1 = 500;
 8000242:	4b5b      	ldr	r3, [pc, #364]	; (80003b0 <getKeyInput+0x1c8>)
 8000244:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000248:	601a      	str	r2, [r3, #0]
                subKeyProcess(1);
 800024a:	2001      	movs	r0, #1
 800024c:	f7ff ffa2 	bl	8000194 <subKeyProcess>
 8000250:	e013      	b.n	800027a <getKeyInput+0x92>
            }
        } else {
            TimeOutForKeyPress1--;
 8000252:	4b57      	ldr	r3, [pc, #348]	; (80003b0 <getKeyInput+0x1c8>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	3b01      	subs	r3, #1
 8000258:	4a55      	ldr	r2, [pc, #340]	; (80003b0 <getKeyInput+0x1c8>)
 800025a:	6013      	str	r3, [r2, #0]
            if (TimeOutForKeyPress1 == 0) {
 800025c:	4b54      	ldr	r3, [pc, #336]	; (80003b0 <getKeyInput+0x1c8>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d10a      	bne.n	800027a <getKeyInput+0x92>
                TimeOutForKeyPress1 = 500;
 8000264:	4b52      	ldr	r3, [pc, #328]	; (80003b0 <getKeyInput+0x1c8>)
 8000266:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800026a:	601a      	str	r2, [r3, #0]
                if (KeyReg3_1 == PRESSED_STATE) {
 800026c:	4b4f      	ldr	r3, [pc, #316]	; (80003ac <getKeyInput+0x1c4>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d102      	bne.n	800027a <getKeyInput+0x92>
                    subKeyProcess(1);
 8000274:	2001      	movs	r0, #1
 8000276:	f7ff ff8d 	bl	8000194 <subKeyProcess>
            }
        }
    }

    // Xử lý button 2
    KeyReg2_2 = KeyReg1_2;
 800027a:	4b4e      	ldr	r3, [pc, #312]	; (80003b4 <getKeyInput+0x1cc>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4a4e      	ldr	r2, [pc, #312]	; (80003b8 <getKeyInput+0x1d0>)
 8000280:	6013      	str	r3, [r2, #0]
    KeyReg1_2 = KeyReg0_2;
 8000282:	4b4e      	ldr	r3, [pc, #312]	; (80003bc <getKeyInput+0x1d4>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a4b      	ldr	r2, [pc, #300]	; (80003b4 <getKeyInput+0x1cc>)
 8000288:	6013      	str	r3, [r2, #0]
    KeyReg0_2 = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 800028a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800028e:	4846      	ldr	r0, [pc, #280]	; (80003a8 <getKeyInput+0x1c0>)
 8000290:	f001 fec8 	bl	8002024 <HAL_GPIO_ReadPin>
 8000294:	4603      	mov	r3, r0
 8000296:	461a      	mov	r2, r3
 8000298:	4b48      	ldr	r3, [pc, #288]	; (80003bc <getKeyInput+0x1d4>)
 800029a:	601a      	str	r2, [r3, #0]

    if ((KeyReg1_2 == KeyReg0_2) && (KeyReg1_2 == KeyReg2_2)) {
 800029c:	4b45      	ldr	r3, [pc, #276]	; (80003b4 <getKeyInput+0x1cc>)
 800029e:	681a      	ldr	r2, [r3, #0]
 80002a0:	4b46      	ldr	r3, [pc, #280]	; (80003bc <getKeyInput+0x1d4>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	429a      	cmp	r2, r3
 80002a6:	d12f      	bne.n	8000308 <getKeyInput+0x120>
 80002a8:	4b42      	ldr	r3, [pc, #264]	; (80003b4 <getKeyInput+0x1cc>)
 80002aa:	681a      	ldr	r2, [r3, #0]
 80002ac:	4b42      	ldr	r3, [pc, #264]	; (80003b8 <getKeyInput+0x1d0>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	429a      	cmp	r2, r3
 80002b2:	d129      	bne.n	8000308 <getKeyInput+0x120>
        if (KeyReg2_2 != KeyReg3_2) {
 80002b4:	4b40      	ldr	r3, [pc, #256]	; (80003b8 <getKeyInput+0x1d0>)
 80002b6:	681a      	ldr	r2, [r3, #0]
 80002b8:	4b41      	ldr	r3, [pc, #260]	; (80003c0 <getKeyInput+0x1d8>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	429a      	cmp	r2, r3
 80002be:	d00f      	beq.n	80002e0 <getKeyInput+0xf8>
            KeyReg3_2 = KeyReg2_2;
 80002c0:	4b3d      	ldr	r3, [pc, #244]	; (80003b8 <getKeyInput+0x1d0>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a3e      	ldr	r2, [pc, #248]	; (80003c0 <getKeyInput+0x1d8>)
 80002c6:	6013      	str	r3, [r2, #0]
            if (KeyReg3_2 == PRESSED_STATE) {
 80002c8:	4b3d      	ldr	r3, [pc, #244]	; (80003c0 <getKeyInput+0x1d8>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d11b      	bne.n	8000308 <getKeyInput+0x120>
                TimeOutForKeyPress2 = 500;
 80002d0:	4b3c      	ldr	r3, [pc, #240]	; (80003c4 <getKeyInput+0x1dc>)
 80002d2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80002d6:	601a      	str	r2, [r3, #0]
                subKeyProcess(2);
 80002d8:	2002      	movs	r0, #2
 80002da:	f7ff ff5b 	bl	8000194 <subKeyProcess>
 80002de:	e013      	b.n	8000308 <getKeyInput+0x120>
            }
        } else {
            TimeOutForKeyPress2--;
 80002e0:	4b38      	ldr	r3, [pc, #224]	; (80003c4 <getKeyInput+0x1dc>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	3b01      	subs	r3, #1
 80002e6:	4a37      	ldr	r2, [pc, #220]	; (80003c4 <getKeyInput+0x1dc>)
 80002e8:	6013      	str	r3, [r2, #0]
            if (TimeOutForKeyPress2 == 0) {
 80002ea:	4b36      	ldr	r3, [pc, #216]	; (80003c4 <getKeyInput+0x1dc>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d10a      	bne.n	8000308 <getKeyInput+0x120>
                TimeOutForKeyPress2 = 500;
 80002f2:	4b34      	ldr	r3, [pc, #208]	; (80003c4 <getKeyInput+0x1dc>)
 80002f4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80002f8:	601a      	str	r2, [r3, #0]
                if (KeyReg3_2 == PRESSED_STATE) {
 80002fa:	4b31      	ldr	r3, [pc, #196]	; (80003c0 <getKeyInput+0x1d8>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d102      	bne.n	8000308 <getKeyInput+0x120>
                    subKeyProcess(2);
 8000302:	2002      	movs	r0, #2
 8000304:	f7ff ff46 	bl	8000194 <subKeyProcess>
            }
        }
    }

    // Xử lý button 3
    KeyReg2_3 = KeyReg1_3;
 8000308:	4b2f      	ldr	r3, [pc, #188]	; (80003c8 <getKeyInput+0x1e0>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a2f      	ldr	r2, [pc, #188]	; (80003cc <getKeyInput+0x1e4>)
 800030e:	6013      	str	r3, [r2, #0]
    KeyReg1_3 = KeyReg0_3;
 8000310:	4b2f      	ldr	r3, [pc, #188]	; (80003d0 <getKeyInput+0x1e8>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a2c      	ldr	r2, [pc, #176]	; (80003c8 <getKeyInput+0x1e0>)
 8000316:	6013      	str	r3, [r2, #0]
    KeyReg0_3 = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 8000318:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800031c:	4822      	ldr	r0, [pc, #136]	; (80003a8 <getKeyInput+0x1c0>)
 800031e:	f001 fe81 	bl	8002024 <HAL_GPIO_ReadPin>
 8000322:	4603      	mov	r3, r0
 8000324:	461a      	mov	r2, r3
 8000326:	4b2a      	ldr	r3, [pc, #168]	; (80003d0 <getKeyInput+0x1e8>)
 8000328:	601a      	str	r2, [r3, #0]

    if ((KeyReg1_3 == KeyReg0_3) && (KeyReg1_3 == KeyReg2_3)) {
 800032a:	4b27      	ldr	r3, [pc, #156]	; (80003c8 <getKeyInput+0x1e0>)
 800032c:	681a      	ldr	r2, [r3, #0]
 800032e:	4b28      	ldr	r3, [pc, #160]	; (80003d0 <getKeyInput+0x1e8>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	429a      	cmp	r2, r3
 8000334:	d12f      	bne.n	8000396 <getKeyInput+0x1ae>
 8000336:	4b24      	ldr	r3, [pc, #144]	; (80003c8 <getKeyInput+0x1e0>)
 8000338:	681a      	ldr	r2, [r3, #0]
 800033a:	4b24      	ldr	r3, [pc, #144]	; (80003cc <getKeyInput+0x1e4>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	429a      	cmp	r2, r3
 8000340:	d129      	bne.n	8000396 <getKeyInput+0x1ae>
        if (KeyReg2_3 != KeyReg3_3) {
 8000342:	4b22      	ldr	r3, [pc, #136]	; (80003cc <getKeyInput+0x1e4>)
 8000344:	681a      	ldr	r2, [r3, #0]
 8000346:	4b23      	ldr	r3, [pc, #140]	; (80003d4 <getKeyInput+0x1ec>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	429a      	cmp	r2, r3
 800034c:	d00f      	beq.n	800036e <getKeyInput+0x186>
            KeyReg3_3 = KeyReg2_3;
 800034e:	4b1f      	ldr	r3, [pc, #124]	; (80003cc <getKeyInput+0x1e4>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4a20      	ldr	r2, [pc, #128]	; (80003d4 <getKeyInput+0x1ec>)
 8000354:	6013      	str	r3, [r2, #0]
            if (KeyReg3_3 == PRESSED_STATE) {
 8000356:	4b1f      	ldr	r3, [pc, #124]	; (80003d4 <getKeyInput+0x1ec>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d11b      	bne.n	8000396 <getKeyInput+0x1ae>
                TimeOutForKeyPress3 = 500;
 800035e:	4b1e      	ldr	r3, [pc, #120]	; (80003d8 <getKeyInput+0x1f0>)
 8000360:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000364:	601a      	str	r2, [r3, #0]
                subKeyProcess(3);
 8000366:	2003      	movs	r0, #3
 8000368:	f7ff ff14 	bl	8000194 <subKeyProcess>
                    subKeyProcess(3);
                }
            }
        }
    }
}
 800036c:	e013      	b.n	8000396 <getKeyInput+0x1ae>
            TimeOutForKeyPress3--;
 800036e:	4b1a      	ldr	r3, [pc, #104]	; (80003d8 <getKeyInput+0x1f0>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	3b01      	subs	r3, #1
 8000374:	4a18      	ldr	r2, [pc, #96]	; (80003d8 <getKeyInput+0x1f0>)
 8000376:	6013      	str	r3, [r2, #0]
            if (TimeOutForKeyPress3 == 0) {
 8000378:	4b17      	ldr	r3, [pc, #92]	; (80003d8 <getKeyInput+0x1f0>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d10a      	bne.n	8000396 <getKeyInput+0x1ae>
                TimeOutForKeyPress3 = 500;
 8000380:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <getKeyInput+0x1f0>)
 8000382:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000386:	601a      	str	r2, [r3, #0]
                if (KeyReg3_3 == PRESSED_STATE) {
 8000388:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <getKeyInput+0x1ec>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d102      	bne.n	8000396 <getKeyInput+0x1ae>
                    subKeyProcess(3);
 8000390:	2003      	movs	r0, #3
 8000392:	f7ff feff 	bl	8000194 <subKeyProcess>
}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	20000004 	.word	0x20000004
 80003a0:	20000008 	.word	0x20000008
 80003a4:	20000000 	.word	0x20000000
 80003a8:	40011000 	.word	0x40011000
 80003ac:	2000000c 	.word	0x2000000c
 80003b0:	20000030 	.word	0x20000030
 80003b4:	20000014 	.word	0x20000014
 80003b8:	20000018 	.word	0x20000018
 80003bc:	20000010 	.word	0x20000010
 80003c0:	2000001c 	.word	0x2000001c
 80003c4:	20000034 	.word	0x20000034
 80003c8:	20000024 	.word	0x20000024
 80003cc:	20000028 	.word	0x20000028
 80003d0:	20000020 	.word	0x20000020
 80003d4:	2000002c 	.word	0x2000002c
 80003d8:	20000038 	.word	0x20000038

080003dc <fsm_automatic>:
 *      Author: TIEN DUY
 */

#include "global.h"

void fsm_automatic(){
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
	switch (status){
 80003e0:	4b98      	ldr	r3, [pc, #608]	; (8000644 <fsm_automatic+0x268>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	3b01      	subs	r3, #1
 80003e6:	2b04      	cmp	r3, #4
 80003e8:	f200 8129 	bhi.w	800063e <fsm_automatic+0x262>
 80003ec:	a201      	add	r2, pc, #4	; (adr r2, 80003f4 <fsm_automatic+0x18>)
 80003ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003f2:	bf00      	nop
 80003f4:	08000409 	.word	0x08000409
 80003f8:	080004bf 	.word	0x080004bf
 80003fc:	08000515 	.word	0x08000515
 8000400:	0800057f 	.word	0x0800057f
 8000404:	080005d5 	.word	0x080005d5
		case INIT:
			HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, SET);
 8000408:	2201      	movs	r2, #1
 800040a:	2102      	movs	r1, #2
 800040c:	488e      	ldr	r0, [pc, #568]	; (8000648 <fsm_automatic+0x26c>)
 800040e:	f001 fe20 	bl	8002052 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, SET);
 8000412:	2201      	movs	r2, #1
 8000414:	2104      	movs	r1, #4
 8000416:	488c      	ldr	r0, [pc, #560]	; (8000648 <fsm_automatic+0x26c>)
 8000418:	f001 fe1b 	bl	8002052 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_YELLOW_GPIO_Port, LED_3_YELLOW_Pin, SET);
 800041c:	2201      	movs	r2, #1
 800041e:	2108      	movs	r1, #8
 8000420:	4889      	ldr	r0, [pc, #548]	; (8000648 <fsm_automatic+0x26c>)
 8000422:	f001 fe16 	bl	8002052 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_4_RED_GPIO_Port, LED_4_RED_Pin, SET);
 8000426:	2201      	movs	r2, #1
 8000428:	2110      	movs	r1, #16
 800042a:	4887      	ldr	r0, [pc, #540]	; (8000648 <fsm_automatic+0x26c>)
 800042c:	f001 fe11 	bl	8002052 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_5_GREEN_GPIO_Port, LED_5_GREEN_Pin, SET);
 8000430:	2201      	movs	r2, #1
 8000432:	2120      	movs	r1, #32
 8000434:	4884      	ldr	r0, [pc, #528]	; (8000648 <fsm_automatic+0x26c>)
 8000436:	f001 fe0c 	bl	8002052 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_YELLOW_GPIO_Port, LED_6_YELLOW_Pin, SET);
 800043a:	2201      	movs	r2, #1
 800043c:	2140      	movs	r1, #64	; 0x40
 800043e:	4882      	ldr	r0, [pc, #520]	; (8000648 <fsm_automatic+0x26c>)
 8000440:	f001 fe07 	bl	8002052 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_7_RED_GPIO_Port, LED_7_RED_Pin, SET);
 8000444:	2201      	movs	r2, #1
 8000446:	2180      	movs	r1, #128	; 0x80
 8000448:	487f      	ldr	r0, [pc, #508]	; (8000648 <fsm_automatic+0x26c>)
 800044a:	f001 fe02 	bl	8002052 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_8_GREEN_GPIO_Port, LED_8_GREEN_Pin, SET);
 800044e:	2201      	movs	r2, #1
 8000450:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000454:	487c      	ldr	r0, [pc, #496]	; (8000648 <fsm_automatic+0x26c>)
 8000456:	f001 fdfc 	bl	8002052 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_9_YELLOW_GPIO_Port, LED_9_YELLOW_Pin, SET);
 800045a:	2201      	movs	r2, #1
 800045c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000460:	4879      	ldr	r0, [pc, #484]	; (8000648 <fsm_automatic+0x26c>)
 8000462:	f001 fdf6 	bl	8002052 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_10_RED_GPIO_Port, LED_10_RED_Pin, SET);
 8000466:	2201      	movs	r2, #1
 8000468:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800046c:	4876      	ldr	r0, [pc, #472]	; (8000648 <fsm_automatic+0x26c>)
 800046e:	f001 fdf0 	bl	8002052 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_11_GREEN_GPIO_Port, LED_11_GREEN_Pin, SET);
 8000472:	2201      	movs	r2, #1
 8000474:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000478:	4873      	ldr	r0, [pc, #460]	; (8000648 <fsm_automatic+0x26c>)
 800047a:	f001 fdea 	bl	8002052 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_12_YELLOW_GPIO_Port, LED_12_YELLOW_Pin, SET);
 800047e:	2201      	movs	r2, #1
 8000480:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000484:	4870      	ldr	r0, [pc, #448]	; (8000648 <fsm_automatic+0x26c>)
 8000486:	f001 fde4 	bl	8002052 <HAL_GPIO_WritePin>
	        time_lane1 = RED_TIME / 1000;
 800048a:	4b70      	ldr	r3, [pc, #448]	; (800064c <fsm_automatic+0x270>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a70      	ldr	r2, [pc, #448]	; (8000650 <fsm_automatic+0x274>)
 8000490:	fb82 1203 	smull	r1, r2, r2, r3
 8000494:	1192      	asrs	r2, r2, #6
 8000496:	17db      	asrs	r3, r3, #31
 8000498:	1ad3      	subs	r3, r2, r3
 800049a:	4a6e      	ldr	r2, [pc, #440]	; (8000654 <fsm_automatic+0x278>)
 800049c:	6013      	str	r3, [r2, #0]
	        time_lane2 = GREEN_TIME / 1000;
 800049e:	4b6e      	ldr	r3, [pc, #440]	; (8000658 <fsm_automatic+0x27c>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a6b      	ldr	r2, [pc, #428]	; (8000650 <fsm_automatic+0x274>)
 80004a4:	fb82 1203 	smull	r1, r2, r2, r3
 80004a8:	1192      	asrs	r2, r2, #6
 80004aa:	17db      	asrs	r3, r3, #31
 80004ac:	1ad3      	subs	r3, r2, r3
 80004ae:	4a6b      	ldr	r2, [pc, #428]	; (800065c <fsm_automatic+0x280>)
 80004b0:	6013      	str	r3, [r2, #0]
            update_led_buffer();
 80004b2:	f000 fb41 	bl	8000b38 <update_led_buffer>
	        status =  AUTO_RED_GREEN;
 80004b6:	4b63      	ldr	r3, [pc, #396]	; (8000644 <fsm_automatic+0x268>)
 80004b8:	2202      	movs	r2, #2
 80004ba:	601a      	str	r2, [r3, #0]

			break;
 80004bc:	e0c0      	b.n	8000640 <fsm_automatic+0x264>
		case AUTO_RED_GREEN:
			traffic_light(RED_GREEN);
 80004be:	200b      	movs	r0, #11
 80004c0:	f001 f8ae 	bl	8001620 <traffic_light>
			//led7_segment();
			time_lane1--;
 80004c4:	4b63      	ldr	r3, [pc, #396]	; (8000654 <fsm_automatic+0x278>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	3b01      	subs	r3, #1
 80004ca:	4a62      	ldr	r2, [pc, #392]	; (8000654 <fsm_automatic+0x278>)
 80004cc:	6013      	str	r3, [r2, #0]
	        time_lane2--;
 80004ce:	4b63      	ldr	r3, [pc, #396]	; (800065c <fsm_automatic+0x280>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	3b01      	subs	r3, #1
 80004d4:	4a61      	ldr	r2, [pc, #388]	; (800065c <fsm_automatic+0x280>)
 80004d6:	6013      	str	r3, [r2, #0]
	        counter -= 1000;
 80004d8:	4b61      	ldr	r3, [pc, #388]	; (8000660 <fsm_automatic+0x284>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80004e0:	4a5f      	ldr	r2, [pc, #380]	; (8000660 <fsm_automatic+0x284>)
 80004e2:	6013      	str	r3, [r2, #0]
			if (counter == 0) {
 80004e4:	4b5e      	ldr	r3, [pc, #376]	; (8000660 <fsm_automatic+0x284>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d110      	bne.n	800050e <fsm_automatic+0x132>
				status = AUTO_RED_YELLOW;
 80004ec:	4b55      	ldr	r3, [pc, #340]	; (8000644 <fsm_automatic+0x268>)
 80004ee:	2203      	movs	r2, #3
 80004f0:	601a      	str	r2, [r3, #0]
		        time_lane2 = YELLOW_TIME / 1000;
 80004f2:	4b5c      	ldr	r3, [pc, #368]	; (8000664 <fsm_automatic+0x288>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4a56      	ldr	r2, [pc, #344]	; (8000650 <fsm_automatic+0x274>)
 80004f8:	fb82 1203 	smull	r1, r2, r2, r3
 80004fc:	1192      	asrs	r2, r2, #6
 80004fe:	17db      	asrs	r3, r3, #31
 8000500:	1ad3      	subs	r3, r2, r3
 8000502:	4a56      	ldr	r2, [pc, #344]	; (800065c <fsm_automatic+0x280>)
 8000504:	6013      	str	r3, [r2, #0]
		        counter = 2000;
 8000506:	4b56      	ldr	r3, [pc, #344]	; (8000660 <fsm_automatic+0x284>)
 8000508:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800050c:	601a      	str	r2, [r3, #0]
			}
			update_led_buffer();
 800050e:	f000 fb13 	bl	8000b38 <update_led_buffer>
			break;
 8000512:	e095      	b.n	8000640 <fsm_automatic+0x264>
		case AUTO_RED_YELLOW:
			traffic_light(RED_YELLOW);
 8000514:	200c      	movs	r0, #12
 8000516:	f001 f883 	bl	8001620 <traffic_light>
			//led7_segment();
			time_lane1--;
 800051a:	4b4e      	ldr	r3, [pc, #312]	; (8000654 <fsm_automatic+0x278>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	3b01      	subs	r3, #1
 8000520:	4a4c      	ldr	r2, [pc, #304]	; (8000654 <fsm_automatic+0x278>)
 8000522:	6013      	str	r3, [r2, #0]
	        time_lane2--;
 8000524:	4b4d      	ldr	r3, [pc, #308]	; (800065c <fsm_automatic+0x280>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	3b01      	subs	r3, #1
 800052a:	4a4c      	ldr	r2, [pc, #304]	; (800065c <fsm_automatic+0x280>)
 800052c:	6013      	str	r3, [r2, #0]
	        counter -= 1000;
 800052e:	4b4c      	ldr	r3, [pc, #304]	; (8000660 <fsm_automatic+0x284>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000536:	4a4a      	ldr	r2, [pc, #296]	; (8000660 <fsm_automatic+0x284>)
 8000538:	6013      	str	r3, [r2, #0]
			if (counter == 0) {
 800053a:	4b49      	ldr	r3, [pc, #292]	; (8000660 <fsm_automatic+0x284>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d11a      	bne.n	8000578 <fsm_automatic+0x19c>
				status = AUTO_GREEN_RED;
 8000542:	4b40      	ldr	r3, [pc, #256]	; (8000644 <fsm_automatic+0x268>)
 8000544:	2204      	movs	r2, #4
 8000546:	601a      	str	r2, [r3, #0]
		        time_lane1 = GREEN_TIME / 1000;
 8000548:	4b43      	ldr	r3, [pc, #268]	; (8000658 <fsm_automatic+0x27c>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a40      	ldr	r2, [pc, #256]	; (8000650 <fsm_automatic+0x274>)
 800054e:	fb82 1203 	smull	r1, r2, r2, r3
 8000552:	1192      	asrs	r2, r2, #6
 8000554:	17db      	asrs	r3, r3, #31
 8000556:	1ad3      	subs	r3, r2, r3
 8000558:	4a3e      	ldr	r2, [pc, #248]	; (8000654 <fsm_automatic+0x278>)
 800055a:	6013      	str	r3, [r2, #0]
		        time_lane2 = RED_TIME / 1000;
 800055c:	4b3b      	ldr	r3, [pc, #236]	; (800064c <fsm_automatic+0x270>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a3b      	ldr	r2, [pc, #236]	; (8000650 <fsm_automatic+0x274>)
 8000562:	fb82 1203 	smull	r1, r2, r2, r3
 8000566:	1192      	asrs	r2, r2, #6
 8000568:	17db      	asrs	r3, r3, #31
 800056a:	1ad3      	subs	r3, r2, r3
 800056c:	4a3b      	ldr	r2, [pc, #236]	; (800065c <fsm_automatic+0x280>)
 800056e:	6013      	str	r3, [r2, #0]
		        counter = 3000;
 8000570:	4b3b      	ldr	r3, [pc, #236]	; (8000660 <fsm_automatic+0x284>)
 8000572:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000576:	601a      	str	r2, [r3, #0]
			}
			update_led_buffer();
 8000578:	f000 fade 	bl	8000b38 <update_led_buffer>
			break;
 800057c:	e060      	b.n	8000640 <fsm_automatic+0x264>
		case AUTO_GREEN_RED:
			traffic_light(GREEN_RED);
 800057e:	200d      	movs	r0, #13
 8000580:	f001 f84e 	bl	8001620 <traffic_light>
			//led7_segment();
			time_lane1--;
 8000584:	4b33      	ldr	r3, [pc, #204]	; (8000654 <fsm_automatic+0x278>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	3b01      	subs	r3, #1
 800058a:	4a32      	ldr	r2, [pc, #200]	; (8000654 <fsm_automatic+0x278>)
 800058c:	6013      	str	r3, [r2, #0]
	        time_lane2--;
 800058e:	4b33      	ldr	r3, [pc, #204]	; (800065c <fsm_automatic+0x280>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	3b01      	subs	r3, #1
 8000594:	4a31      	ldr	r2, [pc, #196]	; (800065c <fsm_automatic+0x280>)
 8000596:	6013      	str	r3, [r2, #0]
	        counter -= 1000;
 8000598:	4b31      	ldr	r3, [pc, #196]	; (8000660 <fsm_automatic+0x284>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80005a0:	4a2f      	ldr	r2, [pc, #188]	; (8000660 <fsm_automatic+0x284>)
 80005a2:	6013      	str	r3, [r2, #0]
			if (counter == 0) {
 80005a4:	4b2e      	ldr	r3, [pc, #184]	; (8000660 <fsm_automatic+0x284>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d110      	bne.n	80005ce <fsm_automatic+0x1f2>
				status = AUTO_YELLOW_RED;
 80005ac:	4b25      	ldr	r3, [pc, #148]	; (8000644 <fsm_automatic+0x268>)
 80005ae:	2205      	movs	r2, #5
 80005b0:	601a      	str	r2, [r3, #0]
		        time_lane1 = YELLOW_TIME / 1000;
 80005b2:	4b2c      	ldr	r3, [pc, #176]	; (8000664 <fsm_automatic+0x288>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a26      	ldr	r2, [pc, #152]	; (8000650 <fsm_automatic+0x274>)
 80005b8:	fb82 1203 	smull	r1, r2, r2, r3
 80005bc:	1192      	asrs	r2, r2, #6
 80005be:	17db      	asrs	r3, r3, #31
 80005c0:	1ad3      	subs	r3, r2, r3
 80005c2:	4a24      	ldr	r2, [pc, #144]	; (8000654 <fsm_automatic+0x278>)
 80005c4:	6013      	str	r3, [r2, #0]
				counter = 2000;
 80005c6:	4b26      	ldr	r3, [pc, #152]	; (8000660 <fsm_automatic+0x284>)
 80005c8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80005cc:	601a      	str	r2, [r3, #0]
			}
			update_led_buffer();
 80005ce:	f000 fab3 	bl	8000b38 <update_led_buffer>
			break;
 80005d2:	e035      	b.n	8000640 <fsm_automatic+0x264>
		case AUTO_YELLOW_RED:
			traffic_light(YELLOW_RED);
 80005d4:	200e      	movs	r0, #14
 80005d6:	f001 f823 	bl	8001620 <traffic_light>
			//led7_segment();
			time_lane1--;
 80005da:	4b1e      	ldr	r3, [pc, #120]	; (8000654 <fsm_automatic+0x278>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	3b01      	subs	r3, #1
 80005e0:	4a1c      	ldr	r2, [pc, #112]	; (8000654 <fsm_automatic+0x278>)
 80005e2:	6013      	str	r3, [r2, #0]
	        time_lane2--;
 80005e4:	4b1d      	ldr	r3, [pc, #116]	; (800065c <fsm_automatic+0x280>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	3b01      	subs	r3, #1
 80005ea:	4a1c      	ldr	r2, [pc, #112]	; (800065c <fsm_automatic+0x280>)
 80005ec:	6013      	str	r3, [r2, #0]
	        counter -= 1000;
 80005ee:	4b1c      	ldr	r3, [pc, #112]	; (8000660 <fsm_automatic+0x284>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80005f6:	4a1a      	ldr	r2, [pc, #104]	; (8000660 <fsm_automatic+0x284>)
 80005f8:	6013      	str	r3, [r2, #0]
			if (counter == 0) {
 80005fa:	4b19      	ldr	r3, [pc, #100]	; (8000660 <fsm_automatic+0x284>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d11a      	bne.n	8000638 <fsm_automatic+0x25c>
				status = AUTO_RED_GREEN;
 8000602:	4b10      	ldr	r3, [pc, #64]	; (8000644 <fsm_automatic+0x268>)
 8000604:	2202      	movs	r2, #2
 8000606:	601a      	str	r2, [r3, #0]
		        time_lane1 = RED_TIME / 1000;
 8000608:	4b10      	ldr	r3, [pc, #64]	; (800064c <fsm_automatic+0x270>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a10      	ldr	r2, [pc, #64]	; (8000650 <fsm_automatic+0x274>)
 800060e:	fb82 1203 	smull	r1, r2, r2, r3
 8000612:	1192      	asrs	r2, r2, #6
 8000614:	17db      	asrs	r3, r3, #31
 8000616:	1ad3      	subs	r3, r2, r3
 8000618:	4a0e      	ldr	r2, [pc, #56]	; (8000654 <fsm_automatic+0x278>)
 800061a:	6013      	str	r3, [r2, #0]
		        time_lane2 = GREEN_TIME / 1000;
 800061c:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <fsm_automatic+0x27c>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a0b      	ldr	r2, [pc, #44]	; (8000650 <fsm_automatic+0x274>)
 8000622:	fb82 1203 	smull	r1, r2, r2, r3
 8000626:	1192      	asrs	r2, r2, #6
 8000628:	17db      	asrs	r3, r3, #31
 800062a:	1ad3      	subs	r3, r2, r3
 800062c:	4a0b      	ldr	r2, [pc, #44]	; (800065c <fsm_automatic+0x280>)
 800062e:	6013      	str	r3, [r2, #0]
				counter = 3000;
 8000630:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <fsm_automatic+0x284>)
 8000632:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000636:	601a      	str	r2, [r3, #0]
			}
			update_led_buffer();
 8000638:	f000 fa7e 	bl	8000b38 <update_led_buffer>
			break;
 800063c:	e000      	b.n	8000640 <fsm_automatic+0x264>
		default:
			break;
 800063e:	bf00      	nop
	}
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000048 	.word	0x20000048
 8000648:	40010800 	.word	0x40010800
 800064c:	2000003c 	.word	0x2000003c
 8000650:	10624dd3 	.word	0x10624dd3
 8000654:	200000b8 	.word	0x200000b8
 8000658:	20000044 	.word	0x20000044
 800065c:	200000bc 	.word	0x200000bc
 8000660:	20000078 	.word	0x20000078
 8000664:	20000040 	.word	0x20000040

08000668 <fsm_manual>:
 *      Author: TIEN DUY
 */

#include "global.h"

void fsm_manual() {
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
    if (button1_flag == 1) {
 800066c:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <fsm_manual+0x7c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b01      	cmp	r3, #1
 8000672:	d132      	bne.n	80006da <fsm_manual+0x72>
    	button1_flag = 0;
 8000674:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <fsm_manual+0x7c>)
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
        switch (MODE) {
 800067a:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <fsm_manual+0x80>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	3b15      	subs	r3, #21
 8000680:	2b03      	cmp	r3, #3
 8000682:	d82c      	bhi.n	80006de <fsm_manual+0x76>
 8000684:	a201      	add	r2, pc, #4	; (adr r2, 800068c <fsm_manual+0x24>)
 8000686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800068a:	bf00      	nop
 800068c:	0800069d 	.word	0x0800069d
 8000690:	080006b1 	.word	0x080006b1
 8000694:	080006bf 	.word	0x080006bf
 8000698:	080006cd 	.word	0x080006cd
            case MODE_NORMAL:
            	status = MODIFY;
 800069c:	4b13      	ldr	r3, [pc, #76]	; (80006ec <fsm_manual+0x84>)
 800069e:	2206      	movs	r2, #6
 80006a0:	601a      	str	r2, [r3, #0]
                MODE = MODE_RED_MODIFY;
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <fsm_manual+0x80>)
 80006a4:	2216      	movs	r2, #22
 80006a6:	601a      	str	r2, [r3, #0]
                traffic_light(RED_MODIFY);
 80006a8:	200f      	movs	r0, #15
 80006aa:	f000 ffb9 	bl	8001620 <traffic_light>
                break;
 80006ae:	e017      	b.n	80006e0 <fsm_manual+0x78>
            case MODE_RED_MODIFY:
                MODE = MODE_YELLOW_MODIFY;
 80006b0:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <fsm_manual+0x80>)
 80006b2:	2217      	movs	r2, #23
 80006b4:	601a      	str	r2, [r3, #0]
                traffic_light(YELLOW_MODIFY);
 80006b6:	2010      	movs	r0, #16
 80006b8:	f000 ffb2 	bl	8001620 <traffic_light>
                break;
 80006bc:	e010      	b.n	80006e0 <fsm_manual+0x78>
            case MODE_YELLOW_MODIFY:
                MODE = MODE_GREEN_MODIFY;
 80006be:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <fsm_manual+0x80>)
 80006c0:	2218      	movs	r2, #24
 80006c2:	601a      	str	r2, [r3, #0]
                traffic_light(GREEN_MODIFY);
 80006c4:	2011      	movs	r0, #17
 80006c6:	f000 ffab 	bl	8001620 <traffic_light>
                break;
 80006ca:	e009      	b.n	80006e0 <fsm_manual+0x78>
            case MODE_GREEN_MODIFY:
                MODE = MODE_NORMAL;
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <fsm_manual+0x80>)
 80006ce:	2215      	movs	r2, #21
 80006d0:	601a      	str	r2, [r3, #0]
                status = INIT;
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <fsm_manual+0x84>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	601a      	str	r2, [r3, #0]
                break;
 80006d8:	e002      	b.n	80006e0 <fsm_manual+0x78>
            default:
            	break;
        }
    }
 80006da:	bf00      	nop
 80006dc:	e000      	b.n	80006e0 <fsm_manual+0x78>
            	break;
 80006de:	bf00      	nop
}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	200000a4 	.word	0x200000a4
 80006e8:	2000004c 	.word	0x2000004c
 80006ec:	20000048 	.word	0x20000048

080006f0 <fsm_setting>:
 *      Author: TIEN DUY
 */

#include "global.h"

void fsm_setting() {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	switch (MODE) {
 80006f4:	4b36      	ldr	r3, [pc, #216]	; (80007d0 <fsm_setting+0xe0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b18      	cmp	r3, #24
 80006fa:	d042      	beq.n	8000782 <fsm_setting+0x92>
 80006fc:	2b18      	cmp	r3, #24
 80006fe:	dc5e      	bgt.n	80007be <fsm_setting+0xce>
 8000700:	2b16      	cmp	r3, #22
 8000702:	d002      	beq.n	800070a <fsm_setting+0x1a>
 8000704:	2b17      	cmp	r3, #23
 8000706:	d01e      	beq.n	8000746 <fsm_setting+0x56>
		if (isButton3Pressed()) {
			GREEN_TIME = GREEN_TIME_MODIFY;
		}
		break;
	default:
		break;
 8000708:	e059      	b.n	80007be <fsm_setting+0xce>
		if (isButton2Pressed()) {
 800070a:	f7ff fd1f 	bl	800014c <isButton2Pressed>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d00e      	beq.n	8000732 <fsm_setting+0x42>
		   RED_TIME_MODIFY = RED_TIME_MODIFY + 1000;
 8000714:	4b2f      	ldr	r3, [pc, #188]	; (80007d4 <fsm_setting+0xe4>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800071c:	4a2d      	ldr	r2, [pc, #180]	; (80007d4 <fsm_setting+0xe4>)
 800071e:	6013      	str	r3, [r2, #0]
		   if (RED_TIME_MODIFY > 99000) {
 8000720:	4b2c      	ldr	r3, [pc, #176]	; (80007d4 <fsm_setting+0xe4>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a2c      	ldr	r2, [pc, #176]	; (80007d8 <fsm_setting+0xe8>)
 8000726:	4293      	cmp	r3, r2
 8000728:	dd03      	ble.n	8000732 <fsm_setting+0x42>
			   RED_TIME_MODIFY = 1000;
 800072a:	4b2a      	ldr	r3, [pc, #168]	; (80007d4 <fsm_setting+0xe4>)
 800072c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000730:	601a      	str	r2, [r3, #0]
		if (isButton3Pressed()) {
 8000732:	f7ff fd1d 	bl	8000170 <isButton3Pressed>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d042      	beq.n	80007c2 <fsm_setting+0xd2>
			RED_TIME = RED_TIME_MODIFY;
 800073c:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <fsm_setting+0xe4>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a26      	ldr	r2, [pc, #152]	; (80007dc <fsm_setting+0xec>)
 8000742:	6013      	str	r3, [r2, #0]
		break;
 8000744:	e03d      	b.n	80007c2 <fsm_setting+0xd2>
		if (isButton2Pressed()) {
 8000746:	f7ff fd01 	bl	800014c <isButton2Pressed>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d00e      	beq.n	800076e <fsm_setting+0x7e>
		    YELLOW_TIME_MODIFY = YELLOW_TIME_MODIFY + 1000;
 8000750:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <fsm_setting+0xf0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000758:	4a21      	ldr	r2, [pc, #132]	; (80007e0 <fsm_setting+0xf0>)
 800075a:	6013      	str	r3, [r2, #0]
		    if (YELLOW_TIME_MODIFY > 99000) {
 800075c:	4b20      	ldr	r3, [pc, #128]	; (80007e0 <fsm_setting+0xf0>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a1d      	ldr	r2, [pc, #116]	; (80007d8 <fsm_setting+0xe8>)
 8000762:	4293      	cmp	r3, r2
 8000764:	dd03      	ble.n	800076e <fsm_setting+0x7e>
		    	YELLOW_TIME_MODIFY = 1000;
 8000766:	4b1e      	ldr	r3, [pc, #120]	; (80007e0 <fsm_setting+0xf0>)
 8000768:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800076c:	601a      	str	r2, [r3, #0]
		if (isButton3Pressed()) {
 800076e:	f7ff fcff 	bl	8000170 <isButton3Pressed>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d026      	beq.n	80007c6 <fsm_setting+0xd6>
			YELLOW_TIME = YELLOW_TIME_MODIFY;
 8000778:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <fsm_setting+0xf0>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a19      	ldr	r2, [pc, #100]	; (80007e4 <fsm_setting+0xf4>)
 800077e:	6013      	str	r3, [r2, #0]
		break;
 8000780:	e021      	b.n	80007c6 <fsm_setting+0xd6>
		if (isButton2Pressed()) {
 8000782:	f7ff fce3 	bl	800014c <isButton2Pressed>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d00e      	beq.n	80007aa <fsm_setting+0xba>
		    GREEN_TIME_MODIFY = GREEN_TIME_MODIFY + 1000;
 800078c:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <fsm_setting+0xf8>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000794:	4a14      	ldr	r2, [pc, #80]	; (80007e8 <fsm_setting+0xf8>)
 8000796:	6013      	str	r3, [r2, #0]
		    if (GREEN_TIME_MODIFY > 99000) {
 8000798:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <fsm_setting+0xf8>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a0e      	ldr	r2, [pc, #56]	; (80007d8 <fsm_setting+0xe8>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	dd03      	ble.n	80007aa <fsm_setting+0xba>
		    	GREEN_TIME_MODIFY = 1000;
 80007a2:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <fsm_setting+0xf8>)
 80007a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007a8:	601a      	str	r2, [r3, #0]
		if (isButton3Pressed()) {
 80007aa:	f7ff fce1 	bl	8000170 <isButton3Pressed>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d00a      	beq.n	80007ca <fsm_setting+0xda>
			GREEN_TIME = GREEN_TIME_MODIFY;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <fsm_setting+0xf8>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a0c      	ldr	r2, [pc, #48]	; (80007ec <fsm_setting+0xfc>)
 80007ba:	6013      	str	r3, [r2, #0]
		break;
 80007bc:	e005      	b.n	80007ca <fsm_setting+0xda>
		break;
 80007be:	bf00      	nop
 80007c0:	e004      	b.n	80007cc <fsm_setting+0xdc>
		break;
 80007c2:	bf00      	nop
 80007c4:	e002      	b.n	80007cc <fsm_setting+0xdc>
		break;
 80007c6:	bf00      	nop
 80007c8:	e000      	b.n	80007cc <fsm_setting+0xdc>
		break;
 80007ca:	bf00      	nop
	}
}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	2000004c 	.word	0x2000004c
 80007d4:	20000050 	.word	0x20000050
 80007d8:	000182b8 	.word	0x000182b8
 80007dc:	2000003c 	.word	0x2000003c
 80007e0:	20000054 	.word	0x20000054
 80007e4:	20000040 	.word	0x20000040
 80007e8:	20000058 	.word	0x20000058
 80007ec:	20000044 	.word	0x20000044

080007f0 <display7SEG>:
#include "led7_segment.h"
#include "global.h"
int time_lane1;
int time_lane2;

void display7SEG(int num) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	if (num == 0) {
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d125      	bne.n	800084a <display7SEG+0x5a>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2110      	movs	r1, #16
 8000802:	48cc      	ldr	r0, [pc, #816]	; (8000b34 <display7SEG+0x344>)
 8000804:	f001 fc25 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	2120      	movs	r1, #32
 800080c:	48c9      	ldr	r0, [pc, #804]	; (8000b34 <display7SEG+0x344>)
 800080e:	f001 fc20 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2140      	movs	r1, #64	; 0x40
 8000816:	48c7      	ldr	r0, [pc, #796]	; (8000b34 <display7SEG+0x344>)
 8000818:	f001 fc1b 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	2180      	movs	r1, #128	; 0x80
 8000820:	48c4      	ldr	r0, [pc, #784]	; (8000b34 <display7SEG+0x344>)
 8000822:	f001 fc16 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 7180 	mov.w	r1, #256	; 0x100
 800082c:	48c1      	ldr	r0, [pc, #772]	; (8000b34 <display7SEG+0x344>)
 800082e:	f001 fc10 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000838:	48be      	ldr	r0, [pc, #760]	; (8000b34 <display7SEG+0x344>)
 800083a:	f001 fc0a 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 800083e:	2201      	movs	r2, #1
 8000840:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000844:	48bb      	ldr	r0, [pc, #748]	; (8000b34 <display7SEG+0x344>)
 8000846:	f001 fc04 	bl	8002052 <HAL_GPIO_WritePin>
	}
	if (num == 1) {
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	2b01      	cmp	r3, #1
 800084e:	d125      	bne.n	800089c <display7SEG+0xac>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000850:	2201      	movs	r2, #1
 8000852:	2110      	movs	r1, #16
 8000854:	48b7      	ldr	r0, [pc, #732]	; (8000b34 <display7SEG+0x344>)
 8000856:	f001 fbfc 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2120      	movs	r1, #32
 800085e:	48b5      	ldr	r0, [pc, #724]	; (8000b34 <display7SEG+0x344>)
 8000860:	f001 fbf7 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	2140      	movs	r1, #64	; 0x40
 8000868:	48b2      	ldr	r0, [pc, #712]	; (8000b34 <display7SEG+0x344>)
 800086a:	f001 fbf2 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 800086e:	2201      	movs	r2, #1
 8000870:	2180      	movs	r1, #128	; 0x80
 8000872:	48b0      	ldr	r0, [pc, #704]	; (8000b34 <display7SEG+0x344>)
 8000874:	f001 fbed 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000878:	2201      	movs	r2, #1
 800087a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800087e:	48ad      	ldr	r0, [pc, #692]	; (8000b34 <display7SEG+0x344>)
 8000880:	f001 fbe7 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000884:	2201      	movs	r2, #1
 8000886:	f44f 7100 	mov.w	r1, #512	; 0x200
 800088a:	48aa      	ldr	r0, [pc, #680]	; (8000b34 <display7SEG+0x344>)
 800088c:	f001 fbe1 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000890:	2201      	movs	r2, #1
 8000892:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000896:	48a7      	ldr	r0, [pc, #668]	; (8000b34 <display7SEG+0x344>)
 8000898:	f001 fbdb 	bl	8002052 <HAL_GPIO_WritePin>
	}
	if (num == 2) {
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2b02      	cmp	r3, #2
 80008a0:	d125      	bne.n	80008ee <display7SEG+0xfe>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2110      	movs	r1, #16
 80008a6:	48a3      	ldr	r0, [pc, #652]	; (8000b34 <display7SEG+0x344>)
 80008a8:	f001 fbd3 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2120      	movs	r1, #32
 80008b0:	48a0      	ldr	r0, [pc, #640]	; (8000b34 <display7SEG+0x344>)
 80008b2:	f001 fbce 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	2140      	movs	r1, #64	; 0x40
 80008ba:	489e      	ldr	r0, [pc, #632]	; (8000b34 <display7SEG+0x344>)
 80008bc:	f001 fbc9 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2180      	movs	r1, #128	; 0x80
 80008c4:	489b      	ldr	r0, [pc, #620]	; (8000b34 <display7SEG+0x344>)
 80008c6:	f001 fbc4 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008d0:	4898      	ldr	r0, [pc, #608]	; (8000b34 <display7SEG+0x344>)
 80008d2:	f001 fbbe 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 80008d6:	2201      	movs	r2, #1
 80008d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008dc:	4895      	ldr	r0, [pc, #596]	; (8000b34 <display7SEG+0x344>)
 80008de:	f001 fbb8 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008e8:	4892      	ldr	r0, [pc, #584]	; (8000b34 <display7SEG+0x344>)
 80008ea:	f001 fbb2 	bl	8002052 <HAL_GPIO_WritePin>
	}
	if (num == 3) {
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2b03      	cmp	r3, #3
 80008f2:	d125      	bne.n	8000940 <display7SEG+0x150>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2110      	movs	r1, #16
 80008f8:	488e      	ldr	r0, [pc, #568]	; (8000b34 <display7SEG+0x344>)
 80008fa:	f001 fbaa 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	2120      	movs	r1, #32
 8000902:	488c      	ldr	r0, [pc, #560]	; (8000b34 <display7SEG+0x344>)
 8000904:	f001 fba5 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000908:	2200      	movs	r2, #0
 800090a:	2140      	movs	r1, #64	; 0x40
 800090c:	4889      	ldr	r0, [pc, #548]	; (8000b34 <display7SEG+0x344>)
 800090e:	f001 fba0 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2180      	movs	r1, #128	; 0x80
 8000916:	4887      	ldr	r0, [pc, #540]	; (8000b34 <display7SEG+0x344>)
 8000918:	f001 fb9b 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 800091c:	2201      	movs	r2, #1
 800091e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000922:	4884      	ldr	r0, [pc, #528]	; (8000b34 <display7SEG+0x344>)
 8000924:	f001 fb95 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000928:	2201      	movs	r2, #1
 800092a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800092e:	4881      	ldr	r0, [pc, #516]	; (8000b34 <display7SEG+0x344>)
 8000930:	f001 fb8f 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800093a:	487e      	ldr	r0, [pc, #504]	; (8000b34 <display7SEG+0x344>)
 800093c:	f001 fb89 	bl	8002052 <HAL_GPIO_WritePin>
	}
	if (num == 4) {
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2b04      	cmp	r3, #4
 8000944:	d125      	bne.n	8000992 <display7SEG+0x1a2>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000946:	2201      	movs	r2, #1
 8000948:	2110      	movs	r1, #16
 800094a:	487a      	ldr	r0, [pc, #488]	; (8000b34 <display7SEG+0x344>)
 800094c:	f001 fb81 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	2120      	movs	r1, #32
 8000954:	4877      	ldr	r0, [pc, #476]	; (8000b34 <display7SEG+0x344>)
 8000956:	f001 fb7c 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	2140      	movs	r1, #64	; 0x40
 800095e:	4875      	ldr	r0, [pc, #468]	; (8000b34 <display7SEG+0x344>)
 8000960:	f001 fb77 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000964:	2201      	movs	r2, #1
 8000966:	2180      	movs	r1, #128	; 0x80
 8000968:	4872      	ldr	r0, [pc, #456]	; (8000b34 <display7SEG+0x344>)
 800096a:	f001 fb72 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 800096e:	2201      	movs	r2, #1
 8000970:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000974:	486f      	ldr	r0, [pc, #444]	; (8000b34 <display7SEG+0x344>)
 8000976:	f001 fb6c 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000980:	486c      	ldr	r0, [pc, #432]	; (8000b34 <display7SEG+0x344>)
 8000982:	f001 fb66 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800098c:	4869      	ldr	r0, [pc, #420]	; (8000b34 <display7SEG+0x344>)
 800098e:	f001 fb60 	bl	8002052 <HAL_GPIO_WritePin>
	}
	if (num == 5) {
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2b05      	cmp	r3, #5
 8000996:	d125      	bne.n	80009e4 <display7SEG+0x1f4>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	2110      	movs	r1, #16
 800099c:	4865      	ldr	r0, [pc, #404]	; (8000b34 <display7SEG+0x344>)
 800099e:	f001 fb58 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 80009a2:	2201      	movs	r2, #1
 80009a4:	2120      	movs	r1, #32
 80009a6:	4863      	ldr	r0, [pc, #396]	; (8000b34 <display7SEG+0x344>)
 80009a8:	f001 fb53 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2140      	movs	r1, #64	; 0x40
 80009b0:	4860      	ldr	r0, [pc, #384]	; (8000b34 <display7SEG+0x344>)
 80009b2:	f001 fb4e 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2180      	movs	r1, #128	; 0x80
 80009ba:	485e      	ldr	r0, [pc, #376]	; (8000b34 <display7SEG+0x344>)
 80009bc:	f001 fb49 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c6:	485b      	ldr	r0, [pc, #364]	; (8000b34 <display7SEG+0x344>)
 80009c8:	f001 fb43 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009d2:	4858      	ldr	r0, [pc, #352]	; (8000b34 <display7SEG+0x344>)
 80009d4:	f001 fb3d 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009de:	4855      	ldr	r0, [pc, #340]	; (8000b34 <display7SEG+0x344>)
 80009e0:	f001 fb37 	bl	8002052 <HAL_GPIO_WritePin>
	}
	if (num == 6) {
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2b06      	cmp	r3, #6
 80009e8:	d125      	bne.n	8000a36 <display7SEG+0x246>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2110      	movs	r1, #16
 80009ee:	4851      	ldr	r0, [pc, #324]	; (8000b34 <display7SEG+0x344>)
 80009f0:	f001 fb2f 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 80009f4:	2201      	movs	r2, #1
 80009f6:	2120      	movs	r1, #32
 80009f8:	484e      	ldr	r0, [pc, #312]	; (8000b34 <display7SEG+0x344>)
 80009fa:	f001 fb2a 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2140      	movs	r1, #64	; 0x40
 8000a02:	484c      	ldr	r0, [pc, #304]	; (8000b34 <display7SEG+0x344>)
 8000a04:	f001 fb25 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2180      	movs	r1, #128	; 0x80
 8000a0c:	4849      	ldr	r0, [pc, #292]	; (8000b34 <display7SEG+0x344>)
 8000a0e:	f001 fb20 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a18:	4846      	ldr	r0, [pc, #280]	; (8000b34 <display7SEG+0x344>)
 8000a1a:	f001 fb1a 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a24:	4843      	ldr	r0, [pc, #268]	; (8000b34 <display7SEG+0x344>)
 8000a26:	f001 fb14 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a30:	4840      	ldr	r0, [pc, #256]	; (8000b34 <display7SEG+0x344>)
 8000a32:	f001 fb0e 	bl	8002052 <HAL_GPIO_WritePin>
	}
	if (num == 7) {
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b07      	cmp	r3, #7
 8000a3a:	d125      	bne.n	8000a88 <display7SEG+0x298>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2110      	movs	r1, #16
 8000a40:	483c      	ldr	r0, [pc, #240]	; (8000b34 <display7SEG+0x344>)
 8000a42:	f001 fb06 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2120      	movs	r1, #32
 8000a4a:	483a      	ldr	r0, [pc, #232]	; (8000b34 <display7SEG+0x344>)
 8000a4c:	f001 fb01 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2140      	movs	r1, #64	; 0x40
 8000a54:	4837      	ldr	r0, [pc, #220]	; (8000b34 <display7SEG+0x344>)
 8000a56:	f001 fafc 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	2180      	movs	r1, #128	; 0x80
 8000a5e:	4835      	ldr	r0, [pc, #212]	; (8000b34 <display7SEG+0x344>)
 8000a60:	f001 faf7 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a6a:	4832      	ldr	r0, [pc, #200]	; (8000b34 <display7SEG+0x344>)
 8000a6c:	f001 faf1 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000a70:	2201      	movs	r2, #1
 8000a72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a76:	482f      	ldr	r0, [pc, #188]	; (8000b34 <display7SEG+0x344>)
 8000a78:	f001 faeb 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a82:	482c      	ldr	r0, [pc, #176]	; (8000b34 <display7SEG+0x344>)
 8000a84:	f001 fae5 	bl	8002052 <HAL_GPIO_WritePin>
	}
	if (num == 8) {
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2b08      	cmp	r3, #8
 8000a8c:	d125      	bne.n	8000ada <display7SEG+0x2ea>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2110      	movs	r1, #16
 8000a92:	4828      	ldr	r0, [pc, #160]	; (8000b34 <display7SEG+0x344>)
 8000a94:	f001 fadd 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2120      	movs	r1, #32
 8000a9c:	4825      	ldr	r0, [pc, #148]	; (8000b34 <display7SEG+0x344>)
 8000a9e:	f001 fad8 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2140      	movs	r1, #64	; 0x40
 8000aa6:	4823      	ldr	r0, [pc, #140]	; (8000b34 <display7SEG+0x344>)
 8000aa8:	f001 fad3 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2180      	movs	r1, #128	; 0x80
 8000ab0:	4820      	ldr	r0, [pc, #128]	; (8000b34 <display7SEG+0x344>)
 8000ab2:	f001 face 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000abc:	481d      	ldr	r0, [pc, #116]	; (8000b34 <display7SEG+0x344>)
 8000abe:	f001 fac8 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac8:	481a      	ldr	r0, [pc, #104]	; (8000b34 <display7SEG+0x344>)
 8000aca:	f001 fac2 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ad4:	4817      	ldr	r0, [pc, #92]	; (8000b34 <display7SEG+0x344>)
 8000ad6:	f001 fabc 	bl	8002052 <HAL_GPIO_WritePin>
	}
	if (num == 9) {
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2b09      	cmp	r3, #9
 8000ade:	d125      	bne.n	8000b2c <display7SEG+0x33c>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2110      	movs	r1, #16
 8000ae4:	4813      	ldr	r0, [pc, #76]	; (8000b34 <display7SEG+0x344>)
 8000ae6:	f001 fab4 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2120      	movs	r1, #32
 8000aee:	4811      	ldr	r0, [pc, #68]	; (8000b34 <display7SEG+0x344>)
 8000af0:	f001 faaf 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2140      	movs	r1, #64	; 0x40
 8000af8:	480e      	ldr	r0, [pc, #56]	; (8000b34 <display7SEG+0x344>)
 8000afa:	f001 faaa 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2180      	movs	r1, #128	; 0x80
 8000b02:	480c      	ldr	r0, [pc, #48]	; (8000b34 <display7SEG+0x344>)
 8000b04:	f001 faa5 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b0e:	4809      	ldr	r0, [pc, #36]	; (8000b34 <display7SEG+0x344>)
 8000b10:	f001 fa9f 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b1a:	4806      	ldr	r0, [pc, #24]	; (8000b34 <display7SEG+0x344>)
 8000b1c:	f001 fa99 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b26:	4803      	ldr	r0, [pc, #12]	; (8000b34 <display7SEG+0x344>)
 8000b28:	f001 fa93 	bl	8002052 <HAL_GPIO_WritePin>
	}
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40010c00 	.word	0x40010c00

08000b38 <update_led_buffer>:
void update_led_buffer() {
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
    led_buffer[0] = time_lane1 / 10;
 8000b3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <update_led_buffer+0x70>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a1a      	ldr	r2, [pc, #104]	; (8000bac <update_led_buffer+0x74>)
 8000b42:	fb82 1203 	smull	r1, r2, r2, r3
 8000b46:	1092      	asrs	r2, r2, #2
 8000b48:	17db      	asrs	r3, r3, #31
 8000b4a:	1ad3      	subs	r3, r2, r3
 8000b4c:	4a18      	ldr	r2, [pc, #96]	; (8000bb0 <update_led_buffer+0x78>)
 8000b4e:	6013      	str	r3, [r2, #0]
    led_buffer[1] = time_lane1 % 10;
 8000b50:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <update_led_buffer+0x70>)
 8000b52:	6819      	ldr	r1, [r3, #0]
 8000b54:	4b15      	ldr	r3, [pc, #84]	; (8000bac <update_led_buffer+0x74>)
 8000b56:	fb83 2301 	smull	r2, r3, r3, r1
 8000b5a:	109a      	asrs	r2, r3, #2
 8000b5c:	17cb      	asrs	r3, r1, #31
 8000b5e:	1ad2      	subs	r2, r2, r3
 8000b60:	4613      	mov	r3, r2
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	4413      	add	r3, r2
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	1aca      	subs	r2, r1, r3
 8000b6a:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <update_led_buffer+0x78>)
 8000b6c:	605a      	str	r2, [r3, #4]
    led_buffer[2] = time_lane2 / 10;
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <update_led_buffer+0x7c>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a0e      	ldr	r2, [pc, #56]	; (8000bac <update_led_buffer+0x74>)
 8000b74:	fb82 1203 	smull	r1, r2, r2, r3
 8000b78:	1092      	asrs	r2, r2, #2
 8000b7a:	17db      	asrs	r3, r3, #31
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	4a0c      	ldr	r2, [pc, #48]	; (8000bb0 <update_led_buffer+0x78>)
 8000b80:	6093      	str	r3, [r2, #8]
    led_buffer[3] = time_lane2 % 10;
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <update_led_buffer+0x7c>)
 8000b84:	6819      	ldr	r1, [r3, #0]
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <update_led_buffer+0x74>)
 8000b88:	fb83 2301 	smull	r2, r3, r3, r1
 8000b8c:	109a      	asrs	r2, r3, #2
 8000b8e:	17cb      	asrs	r3, r1, #31
 8000b90:	1ad2      	subs	r2, r2, r3
 8000b92:	4613      	mov	r3, r2
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	4413      	add	r3, r2
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	1aca      	subs	r2, r1, r3
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <update_led_buffer+0x78>)
 8000b9e:	60da      	str	r2, [r3, #12]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr
 8000ba8:	200000b8 	.word	0x200000b8
 8000bac:	66666667 	.word	0x66666667
 8000bb0:	2000005c 	.word	0x2000005c
 8000bb4:	200000bc 	.word	0x200000bc

08000bb8 <led7_segment>:
void led7_segment() {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
	int digit_high, digit_low, value;
	switch (MODE) {
 8000bbe:	4bb2      	ldr	r3, [pc, #712]	; (8000e88 <led7_segment+0x2d0>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2b18      	cmp	r3, #24
 8000bc4:	d00e      	beq.n	8000be4 <led7_segment+0x2c>
 8000bc6:	2b18      	cmp	r3, #24
 8000bc8:	dc10      	bgt.n	8000bec <led7_segment+0x34>
 8000bca:	2b16      	cmp	r3, #22
 8000bcc:	d002      	beq.n	8000bd4 <led7_segment+0x1c>
 8000bce:	2b17      	cmp	r3, #23
 8000bd0:	d004      	beq.n	8000bdc <led7_segment+0x24>
			break;
		case MODE_GREEN_MODIFY:
			value = GREEN_TIME_MODIFY;
			break;
		default:
			break;
 8000bd2:	e00b      	b.n	8000bec <led7_segment+0x34>
			value = RED_TIME_MODIFY;
 8000bd4:	4bad      	ldr	r3, [pc, #692]	; (8000e8c <led7_segment+0x2d4>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	60fb      	str	r3, [r7, #12]
			break;
 8000bda:	e008      	b.n	8000bee <led7_segment+0x36>
			value = YELLOW_TIME_MODIFY;
 8000bdc:	4bac      	ldr	r3, [pc, #688]	; (8000e90 <led7_segment+0x2d8>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	60fb      	str	r3, [r7, #12]
			break;
 8000be2:	e004      	b.n	8000bee <led7_segment+0x36>
			value = GREEN_TIME_MODIFY;
 8000be4:	4bab      	ldr	r3, [pc, #684]	; (8000e94 <led7_segment+0x2dc>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	60fb      	str	r3, [r7, #12]
			break;
 8000bea:	e000      	b.n	8000bee <led7_segment+0x36>
			break;
 8000bec:	bf00      	nop
	}
    digit_high = (value / 1000) / 10;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	4aa9      	ldr	r2, [pc, #676]	; (8000e98 <led7_segment+0x2e0>)
 8000bf2:	fb82 1203 	smull	r1, r2, r2, r3
 8000bf6:	1312      	asrs	r2, r2, #12
 8000bf8:	17db      	asrs	r3, r3, #31
 8000bfa:	1ad3      	subs	r3, r2, r3
 8000bfc:	60bb      	str	r3, [r7, #8]
    digit_low = (value / 1000) % 10;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	4aa6      	ldr	r2, [pc, #664]	; (8000e9c <led7_segment+0x2e4>)
 8000c02:	fb82 1203 	smull	r1, r2, r2, r3
 8000c06:	1192      	asrs	r2, r2, #6
 8000c08:	17db      	asrs	r3, r3, #31
 8000c0a:	1ad2      	subs	r2, r2, r3
 8000c0c:	4ba4      	ldr	r3, [pc, #656]	; (8000ea0 <led7_segment+0x2e8>)
 8000c0e:	fb83 1302 	smull	r1, r3, r3, r2
 8000c12:	1099      	asrs	r1, r3, #2
 8000c14:	17d3      	asrs	r3, r2, #31
 8000c16:	1ac9      	subs	r1, r1, r3
 8000c18:	460b      	mov	r3, r1
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	607b      	str	r3, [r7, #4]
    if (status != MODIFY) {
 8000c24:	4b9f      	ldr	r3, [pc, #636]	; (8000ea4 <led7_segment+0x2ec>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b06      	cmp	r3, #6
 8000c2a:	f000 8084 	beq.w	8000d36 <led7_segment+0x17e>
		  switch (index_led) {
 8000c2e:	4b9e      	ldr	r3, [pc, #632]	; (8000ea8 <led7_segment+0x2f0>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2b03      	cmp	r3, #3
 8000c34:	d872      	bhi.n	8000d1c <led7_segment+0x164>
 8000c36:	a201      	add	r2, pc, #4	; (adr r2, 8000c3c <led7_segment+0x84>)
 8000c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c3c:	08000c4d 	.word	0x08000c4d
 8000c40:	08000c81 	.word	0x08000c81
 8000c44:	08000cb5 	.word	0x08000cb5
 8000c48:	08000ce9 	.word	0x08000ce9
		  	case 0:
		  		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2101      	movs	r1, #1
 8000c50:	4896      	ldr	r0, [pc, #600]	; (8000eac <led7_segment+0x2f4>)
 8000c52:	f001 f9fe 	bl	8002052 <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000c56:	2201      	movs	r2, #1
 8000c58:	2102      	movs	r1, #2
 8000c5a:	4894      	ldr	r0, [pc, #592]	; (8000eac <led7_segment+0x2f4>)
 8000c5c:	f001 f9f9 	bl	8002052 <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000c60:	2201      	movs	r2, #1
 8000c62:	2104      	movs	r1, #4
 8000c64:	4891      	ldr	r0, [pc, #580]	; (8000eac <led7_segment+0x2f4>)
 8000c66:	f001 f9f4 	bl	8002052 <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	2108      	movs	r1, #8
 8000c6e:	488f      	ldr	r0, [pc, #572]	; (8000eac <led7_segment+0x2f4>)
 8000c70:	f001 f9ef 	bl	8002052 <HAL_GPIO_WritePin>
		  		display7SEG(led_buffer[0]);
 8000c74:	4b8e      	ldr	r3, [pc, #568]	; (8000eb0 <led7_segment+0x2f8>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff fdb9 	bl	80007f0 <display7SEG>
		  		break;
 8000c7e:	e04e      	b.n	8000d1e <led7_segment+0x166>
		  	case 1:
		  		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000c80:	2201      	movs	r2, #1
 8000c82:	2101      	movs	r1, #1
 8000c84:	4889      	ldr	r0, [pc, #548]	; (8000eac <led7_segment+0x2f4>)
 8000c86:	f001 f9e4 	bl	8002052 <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2102      	movs	r1, #2
 8000c8e:	4887      	ldr	r0, [pc, #540]	; (8000eac <led7_segment+0x2f4>)
 8000c90:	f001 f9df 	bl	8002052 <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000c94:	2201      	movs	r2, #1
 8000c96:	2104      	movs	r1, #4
 8000c98:	4884      	ldr	r0, [pc, #528]	; (8000eac <led7_segment+0x2f4>)
 8000c9a:	f001 f9da 	bl	8002052 <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	2108      	movs	r1, #8
 8000ca2:	4882      	ldr	r0, [pc, #520]	; (8000eac <led7_segment+0x2f4>)
 8000ca4:	f001 f9d5 	bl	8002052 <HAL_GPIO_WritePin>
		  		display7SEG(led_buffer[1]);
 8000ca8:	4b81      	ldr	r3, [pc, #516]	; (8000eb0 <led7_segment+0x2f8>)
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fd9f 	bl	80007f0 <display7SEG>
		  		break;
 8000cb2:	e034      	b.n	8000d1e <led7_segment+0x166>
		  	case 2:
		  		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	487c      	ldr	r0, [pc, #496]	; (8000eac <led7_segment+0x2f4>)
 8000cba:	f001 f9ca 	bl	8002052 <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	2102      	movs	r1, #2
 8000cc2:	487a      	ldr	r0, [pc, #488]	; (8000eac <led7_segment+0x2f4>)
 8000cc4:	f001 f9c5 	bl	8002052 <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2104      	movs	r1, #4
 8000ccc:	4877      	ldr	r0, [pc, #476]	; (8000eac <led7_segment+0x2f4>)
 8000cce:	f001 f9c0 	bl	8002052 <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	2108      	movs	r1, #8
 8000cd6:	4875      	ldr	r0, [pc, #468]	; (8000eac <led7_segment+0x2f4>)
 8000cd8:	f001 f9bb 	bl	8002052 <HAL_GPIO_WritePin>
		  		display7SEG(led_buffer[2]);
 8000cdc:	4b74      	ldr	r3, [pc, #464]	; (8000eb0 <led7_segment+0x2f8>)
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff fd85 	bl	80007f0 <display7SEG>
		  		break;
 8000ce6:	e01a      	b.n	8000d1e <led7_segment+0x166>
		  	case 3:
		  		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	2101      	movs	r1, #1
 8000cec:	486f      	ldr	r0, [pc, #444]	; (8000eac <led7_segment+0x2f4>)
 8000cee:	f001 f9b0 	bl	8002052 <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2102      	movs	r1, #2
 8000cf6:	486d      	ldr	r0, [pc, #436]	; (8000eac <led7_segment+0x2f4>)
 8000cf8:	f001 f9ab 	bl	8002052 <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	2104      	movs	r1, #4
 8000d00:	486a      	ldr	r0, [pc, #424]	; (8000eac <led7_segment+0x2f4>)
 8000d02:	f001 f9a6 	bl	8002052 <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2108      	movs	r1, #8
 8000d0a:	4868      	ldr	r0, [pc, #416]	; (8000eac <led7_segment+0x2f4>)
 8000d0c:	f001 f9a1 	bl	8002052 <HAL_GPIO_WritePin>
		  		display7SEG(led_buffer[3]);
 8000d10:	4b67      	ldr	r3, [pc, #412]	; (8000eb0 <led7_segment+0x2f8>)
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fd6b 	bl	80007f0 <display7SEG>
		  		break;
 8000d1a:	e000      	b.n	8000d1e <led7_segment+0x166>
		  	default:
		  		break;
 8000d1c:	bf00      	nop
		  	}
		  index_led++;
 8000d1e:	4b62      	ldr	r3, [pc, #392]	; (8000ea8 <led7_segment+0x2f0>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	3301      	adds	r3, #1
 8000d24:	4a60      	ldr	r2, [pc, #384]	; (8000ea8 <led7_segment+0x2f0>)
 8000d26:	6013      	str	r3, [r2, #0]
		  if (index_led > 3) {
 8000d28:	4b5f      	ldr	r3, [pc, #380]	; (8000ea8 <led7_segment+0x2f0>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b03      	cmp	r3, #3
 8000d2e:	dd02      	ble.n	8000d36 <led7_segment+0x17e>
			  index_led = 0;
 8000d30:	4b5d      	ldr	r3, [pc, #372]	; (8000ea8 <led7_segment+0x2f0>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
		  }
    }
    if (status == MODIFY) {
 8000d36:	4b5b      	ldr	r3, [pc, #364]	; (8000ea4 <led7_segment+0x2ec>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2b06      	cmp	r3, #6
 8000d3c:	f040 80cb 	bne.w	8000ed6 <led7_segment+0x31e>
        switch (index_led_manual) {
 8000d40:	4b5c      	ldr	r3, [pc, #368]	; (8000eb4 <led7_segment+0x2fc>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b03      	cmp	r3, #3
 8000d46:	f200 809b 	bhi.w	8000e80 <led7_segment+0x2c8>
 8000d4a:	a201      	add	r2, pc, #4	; (adr r2, 8000d50 <led7_segment+0x198>)
 8000d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d50:	08000d61 	.word	0x08000d61
 8000d54:	08000d91 	.word	0x08000d91
 8000d58:	08000dc1 	.word	0x08000dc1
 8000d5c:	08000e21 	.word	0x08000e21
            case 0:
                HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2101      	movs	r1, #1
 8000d64:	4851      	ldr	r0, [pc, #324]	; (8000eac <led7_segment+0x2f4>)
 8000d66:	f001 f974 	bl	8002052 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	2102      	movs	r1, #2
 8000d6e:	484f      	ldr	r0, [pc, #316]	; (8000eac <led7_segment+0x2f4>)
 8000d70:	f001 f96f 	bl	8002052 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000d74:	2201      	movs	r2, #1
 8000d76:	2104      	movs	r1, #4
 8000d78:	484c      	ldr	r0, [pc, #304]	; (8000eac <led7_segment+0x2f4>)
 8000d7a:	f001 f96a 	bl	8002052 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000d7e:	2201      	movs	r2, #1
 8000d80:	2108      	movs	r1, #8
 8000d82:	484a      	ldr	r0, [pc, #296]	; (8000eac <led7_segment+0x2f4>)
 8000d84:	f001 f965 	bl	8002052 <HAL_GPIO_WritePin>
                display7SEG(digit_high);
 8000d88:	68b8      	ldr	r0, [r7, #8]
 8000d8a:	f7ff fd31 	bl	80007f0 <display7SEG>
                break;
 8000d8e:	e096      	b.n	8000ebe <led7_segment+0x306>
            case 1:
                HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000d90:	2201      	movs	r2, #1
 8000d92:	2101      	movs	r1, #1
 8000d94:	4845      	ldr	r0, [pc, #276]	; (8000eac <led7_segment+0x2f4>)
 8000d96:	f001 f95c 	bl	8002052 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2102      	movs	r1, #2
 8000d9e:	4843      	ldr	r0, [pc, #268]	; (8000eac <led7_segment+0x2f4>)
 8000da0:	f001 f957 	bl	8002052 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000da4:	2201      	movs	r2, #1
 8000da6:	2104      	movs	r1, #4
 8000da8:	4840      	ldr	r0, [pc, #256]	; (8000eac <led7_segment+0x2f4>)
 8000daa:	f001 f952 	bl	8002052 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000dae:	2201      	movs	r2, #1
 8000db0:	2108      	movs	r1, #8
 8000db2:	483e      	ldr	r0, [pc, #248]	; (8000eac <led7_segment+0x2f4>)
 8000db4:	f001 f94d 	bl	8002052 <HAL_GPIO_WritePin>
                display7SEG(digit_low);
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff fd19 	bl	80007f0 <display7SEG>
                break;
 8000dbe:	e07e      	b.n	8000ebe <led7_segment+0x306>
            case 2:
                HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	4839      	ldr	r0, [pc, #228]	; (8000eac <led7_segment+0x2f4>)
 8000dc6:	f001 f944 	bl	8002052 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	2102      	movs	r1, #2
 8000dce:	4837      	ldr	r0, [pc, #220]	; (8000eac <led7_segment+0x2f4>)
 8000dd0:	f001 f93f 	bl	8002052 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2104      	movs	r1, #4
 8000dd8:	4834      	ldr	r0, [pc, #208]	; (8000eac <led7_segment+0x2f4>)
 8000dda:	f001 f93a 	bl	8002052 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000dde:	2201      	movs	r2, #1
 8000de0:	2108      	movs	r1, #8
 8000de2:	4832      	ldr	r0, [pc, #200]	; (8000eac <led7_segment+0x2f4>)
 8000de4:	f001 f935 	bl	8002052 <HAL_GPIO_WritePin>
                if (MODE == MODE_RED_MODIFY) {
 8000de8:	4b27      	ldr	r3, [pc, #156]	; (8000e88 <led7_segment+0x2d0>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b16      	cmp	r3, #22
 8000dee:	d104      	bne.n	8000dfa <led7_segment+0x242>
                	display7SEG(led_buffer1[0]);
 8000df0:	4b31      	ldr	r3, [pc, #196]	; (8000eb8 <led7_segment+0x300>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fcfb 	bl	80007f0 <display7SEG>
                }
                if (MODE == MODE_YELLOW_MODIFY) {
 8000dfa:	4b23      	ldr	r3, [pc, #140]	; (8000e88 <led7_segment+0x2d0>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b17      	cmp	r3, #23
 8000e00:	d104      	bne.n	8000e0c <led7_segment+0x254>
                	display7SEG(led_buffer1[1]);
 8000e02:	4b2d      	ldr	r3, [pc, #180]	; (8000eb8 <led7_segment+0x300>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fcf2 	bl	80007f0 <display7SEG>
                }
                if (MODE == MODE_GREEN_MODIFY) {
 8000e0c:	4b1e      	ldr	r3, [pc, #120]	; (8000e88 <led7_segment+0x2d0>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b18      	cmp	r3, #24
 8000e12:	d137      	bne.n	8000e84 <led7_segment+0x2cc>
                	display7SEG(led_buffer1[2]);
 8000e14:	4b28      	ldr	r3, [pc, #160]	; (8000eb8 <led7_segment+0x300>)
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fce9 	bl	80007f0 <display7SEG>
                }
            	break;
 8000e1e:	e031      	b.n	8000e84 <led7_segment+0x2cc>
            case 3:
                HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000e20:	2201      	movs	r2, #1
 8000e22:	2101      	movs	r1, #1
 8000e24:	4821      	ldr	r0, [pc, #132]	; (8000eac <led7_segment+0x2f4>)
 8000e26:	f001 f914 	bl	8002052 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	2102      	movs	r1, #2
 8000e2e:	481f      	ldr	r0, [pc, #124]	; (8000eac <led7_segment+0x2f4>)
 8000e30:	f001 f90f 	bl	8002052 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000e34:	2201      	movs	r2, #1
 8000e36:	2104      	movs	r1, #4
 8000e38:	481c      	ldr	r0, [pc, #112]	; (8000eac <led7_segment+0x2f4>)
 8000e3a:	f001 f90a 	bl	8002052 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2108      	movs	r1, #8
 8000e42:	481a      	ldr	r0, [pc, #104]	; (8000eac <led7_segment+0x2f4>)
 8000e44:	f001 f905 	bl	8002052 <HAL_GPIO_WritePin>
                if (MODE == MODE_RED_MODIFY) {
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <led7_segment+0x2d0>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b16      	cmp	r3, #22
 8000e4e:	d104      	bne.n	8000e5a <led7_segment+0x2a2>
                	display7SEG(led_buffer1[0]);
 8000e50:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <led7_segment+0x300>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff fccb 	bl	80007f0 <display7SEG>
                }
                if (MODE == MODE_YELLOW_MODIFY) {
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <led7_segment+0x2d0>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b17      	cmp	r3, #23
 8000e60:	d104      	bne.n	8000e6c <led7_segment+0x2b4>
                	display7SEG(led_buffer1[1]);
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <led7_segment+0x300>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fcc2 	bl	80007f0 <display7SEG>
                }
                if (MODE == MODE_GREEN_MODIFY) {
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <led7_segment+0x2d0>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b18      	cmp	r3, #24
 8000e72:	d123      	bne.n	8000ebc <led7_segment+0x304>
                	display7SEG(led_buffer1[2]);
 8000e74:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <led7_segment+0x300>)
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fcb9 	bl	80007f0 <display7SEG>
                }
            	break;
 8000e7e:	e01d      	b.n	8000ebc <led7_segment+0x304>
            default:
                break;
 8000e80:	bf00      	nop
 8000e82:	e01c      	b.n	8000ebe <led7_segment+0x306>
            	break;
 8000e84:	bf00      	nop
 8000e86:	e01a      	b.n	8000ebe <led7_segment+0x306>
 8000e88:	2000004c 	.word	0x2000004c
 8000e8c:	20000050 	.word	0x20000050
 8000e90:	20000054 	.word	0x20000054
 8000e94:	20000058 	.word	0x20000058
 8000e98:	68db8bad 	.word	0x68db8bad
 8000e9c:	10624dd3 	.word	0x10624dd3
 8000ea0:	66666667 	.word	0x66666667
 8000ea4:	20000048 	.word	0x20000048
 8000ea8:	200000b0 	.word	0x200000b0
 8000eac:	40010c00 	.word	0x40010c00
 8000eb0:	2000005c 	.word	0x2000005c
 8000eb4:	200000b4 	.word	0x200000b4
 8000eb8:	2000006c 	.word	0x2000006c
            	break;
 8000ebc:	bf00      	nop
        }
        index_led_manual++;
 8000ebe:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <led7_segment+0x328>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	4a06      	ldr	r2, [pc, #24]	; (8000ee0 <led7_segment+0x328>)
 8000ec6:	6013      	str	r3, [r2, #0]
        if (index_led_manual > 3) {
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <led7_segment+0x328>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b03      	cmp	r3, #3
 8000ece:	dd02      	ble.n	8000ed6 <led7_segment+0x31e>
            index_led_manual = 0;
 8000ed0:	4b03      	ldr	r3, [pc, #12]	; (8000ee0 <led7_segment+0x328>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
        }
    }
}
 8000ed6:	bf00      	nop
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200000b4 	.word	0x200000b4

08000ee4 <traffic_light_modify>:

void traffic_light_modify() {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
    if (MODE == MODE_RED_MODIFY) {
 8000ee8:	4b21      	ldr	r3, [pc, #132]	; (8000f70 <traffic_light_modify+0x8c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b16      	cmp	r3, #22
 8000eee:	d110      	bne.n	8000f12 <traffic_light_modify+0x2e>
    	HAL_GPIO_TogglePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin);
 8000ef0:	2102      	movs	r1, #2
 8000ef2:	4820      	ldr	r0, [pc, #128]	; (8000f74 <traffic_light_modify+0x90>)
 8000ef4:	f001 f8c5 	bl	8002082 <HAL_GPIO_TogglePin>
    	HAL_GPIO_TogglePin(LED_4_RED_GPIO_Port, LED_4_RED_Pin);
 8000ef8:	2110      	movs	r1, #16
 8000efa:	481e      	ldr	r0, [pc, #120]	; (8000f74 <traffic_light_modify+0x90>)
 8000efc:	f001 f8c1 	bl	8002082 <HAL_GPIO_TogglePin>
    	HAL_GPIO_TogglePin(LED_7_RED_GPIO_Port, LED_7_RED_Pin);
 8000f00:	2180      	movs	r1, #128	; 0x80
 8000f02:	481c      	ldr	r0, [pc, #112]	; (8000f74 <traffic_light_modify+0x90>)
 8000f04:	f001 f8bd 	bl	8002082 <HAL_GPIO_TogglePin>
    	HAL_GPIO_TogglePin(LED_10_RED_GPIO_Port, LED_10_RED_Pin);
 8000f08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f0c:	4819      	ldr	r0, [pc, #100]	; (8000f74 <traffic_light_modify+0x90>)
 8000f0e:	f001 f8b8 	bl	8002082 <HAL_GPIO_TogglePin>
    }
    if (MODE == MODE_YELLOW_MODIFY) {
 8000f12:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <traffic_light_modify+0x8c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2b17      	cmp	r3, #23
 8000f18:	d111      	bne.n	8000f3e <traffic_light_modify+0x5a>
    	HAL_GPIO_TogglePin(LED_3_YELLOW_GPIO_Port, LED_3_YELLOW_Pin);
 8000f1a:	2108      	movs	r1, #8
 8000f1c:	4815      	ldr	r0, [pc, #84]	; (8000f74 <traffic_light_modify+0x90>)
 8000f1e:	f001 f8b0 	bl	8002082 <HAL_GPIO_TogglePin>
    	HAL_GPIO_TogglePin(LED_6_YELLOW_GPIO_Port, LED_6_YELLOW_Pin);
 8000f22:	2140      	movs	r1, #64	; 0x40
 8000f24:	4813      	ldr	r0, [pc, #76]	; (8000f74 <traffic_light_modify+0x90>)
 8000f26:	f001 f8ac 	bl	8002082 <HAL_GPIO_TogglePin>
    	HAL_GPIO_TogglePin(LED_9_YELLOW_GPIO_Port, LED_9_YELLOW_Pin);
 8000f2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f2e:	4811      	ldr	r0, [pc, #68]	; (8000f74 <traffic_light_modify+0x90>)
 8000f30:	f001 f8a7 	bl	8002082 <HAL_GPIO_TogglePin>
    	HAL_GPIO_TogglePin(LED_12_YELLOW_GPIO_Port, LED_12_YELLOW_Pin);
 8000f34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f38:	480e      	ldr	r0, [pc, #56]	; (8000f74 <traffic_light_modify+0x90>)
 8000f3a:	f001 f8a2 	bl	8002082 <HAL_GPIO_TogglePin>
    }
    if (MODE == MODE_GREEN_MODIFY) {
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <traffic_light_modify+0x8c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2b18      	cmp	r3, #24
 8000f44:	d111      	bne.n	8000f6a <traffic_light_modify+0x86>
    	HAL_GPIO_TogglePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin);
 8000f46:	2104      	movs	r1, #4
 8000f48:	480a      	ldr	r0, [pc, #40]	; (8000f74 <traffic_light_modify+0x90>)
 8000f4a:	f001 f89a 	bl	8002082 <HAL_GPIO_TogglePin>
    	HAL_GPIO_TogglePin(LED_5_GREEN_GPIO_Port, LED_5_GREEN_Pin);
 8000f4e:	2120      	movs	r1, #32
 8000f50:	4808      	ldr	r0, [pc, #32]	; (8000f74 <traffic_light_modify+0x90>)
 8000f52:	f001 f896 	bl	8002082 <HAL_GPIO_TogglePin>
    	HAL_GPIO_TogglePin(LED_8_GREEN_GPIO_Port, LED_8_GREEN_Pin);
 8000f56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f5a:	4806      	ldr	r0, [pc, #24]	; (8000f74 <traffic_light_modify+0x90>)
 8000f5c:	f001 f891 	bl	8002082 <HAL_GPIO_TogglePin>
    	HAL_GPIO_TogglePin(LED_11_GREEN_GPIO_Port, LED_11_GREEN_Pin);
 8000f60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f64:	4803      	ldr	r0, [pc, #12]	; (8000f74 <traffic_light_modify+0x90>)
 8000f66:	f001 f88c 	bl	8002082 <HAL_GPIO_TogglePin>
    }
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	2000004c 	.word	0x2000004c
 8000f74:	40010800 	.word	0x40010800

08000f78 <Toggle_LED_RED>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Toggle_LED_RED() {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000f7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <Toggle_LED_RED+0x14>)
 8000f82:	f001 f87e 	bl	8002082 <HAL_GPIO_TogglePin>
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40010800 	.word	0x40010800

08000f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f94:	f000 fd5c 	bl	8001a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f98:	f000 f838 	bl	800100c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9c:	f000 f8be 	bl	800111c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000fa0:	f000 f870 	bl	8001084 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000fa4:	4812      	ldr	r0, [pc, #72]	; (8000ff0 <main+0x60>)
 8000fa6:	f001 fcb1 	bl	800290c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Init();
 8000faa:	f000 f93a 	bl	8001222 <SCH_Init>
  SCH_ADD_TASK(Toggle_LED_RED, 0, 100);
 8000fae:	2264      	movs	r2, #100	; 0x64
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4810      	ldr	r0, [pc, #64]	; (8000ff4 <main+0x64>)
 8000fb4:	f000 f9bc 	bl	8001330 <SCH_ADD_TASK>
  SCH_ADD_TASK(fsm_automatic, 0, 100);
 8000fb8:	2264      	movs	r2, #100	; 0x64
 8000fba:	2100      	movs	r1, #0
 8000fbc:	480e      	ldr	r0, [pc, #56]	; (8000ff8 <main+0x68>)
 8000fbe:	f000 f9b7 	bl	8001330 <SCH_ADD_TASK>
  SCH_ADD_TASK(led7_segment, 1, 25);
 8000fc2:	2219      	movs	r2, #25
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	480d      	ldr	r0, [pc, #52]	; (8000ffc <main+0x6c>)
 8000fc8:	f000 f9b2 	bl	8001330 <SCH_ADD_TASK>
  SCH_ADD_TASK(traffic_light_modify, 0, 25);
 8000fcc:	2219      	movs	r2, #25
 8000fce:	2100      	movs	r1, #0
 8000fd0:	480b      	ldr	r0, [pc, #44]	; (8001000 <main+0x70>)
 8000fd2:	f000 f9ad 	bl	8001330 <SCH_ADD_TASK>
  SCH_ADD_TASK(fsm_manual, 0, 25);
 8000fd6:	2219      	movs	r2, #25
 8000fd8:	2100      	movs	r1, #0
 8000fda:	480a      	ldr	r0, [pc, #40]	; (8001004 <main+0x74>)
 8000fdc:	f000 f9a8 	bl	8001330 <SCH_ADD_TASK>
  SCH_ADD_TASK(fsm_setting, 0, 25);
 8000fe0:	2219      	movs	r2, #25
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4808      	ldr	r0, [pc, #32]	; (8001008 <main+0x78>)
 8000fe6:	f000 f9a3 	bl	8001330 <SCH_ADD_TASK>
  while (1)
  {
    /* USER CODE END WHILE */
	  SCH_Dispatch_Tasks();
 8000fea:	f000 f9f3 	bl	80013d4 <SCH_Dispatch_Tasks>
 8000fee:	e7fc      	b.n	8000fea <main+0x5a>
 8000ff0:	200000c0 	.word	0x200000c0
 8000ff4:	08000f79 	.word	0x08000f79
 8000ff8:	080003dd 	.word	0x080003dd
 8000ffc:	08000bb9 	.word	0x08000bb9
 8001000:	08000ee5 	.word	0x08000ee5
 8001004:	08000669 	.word	0x08000669
 8001008:	080006f1 	.word	0x080006f1

0800100c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b090      	sub	sp, #64	; 0x40
 8001010:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001012:	f107 0318 	add.w	r3, r7, #24
 8001016:	2228      	movs	r2, #40	; 0x28
 8001018:	2100      	movs	r1, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f002 f826 	bl	800306c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
 800102c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800102e:	2302      	movs	r3, #2
 8001030:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001032:	2301      	movs	r3, #1
 8001034:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001036:	2310      	movs	r3, #16
 8001038:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800103a:	2300      	movs	r3, #0
 800103c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800103e:	f107 0318 	add.w	r3, r7, #24
 8001042:	4618      	mov	r0, r3
 8001044:	f001 f836 	bl	80020b4 <HAL_RCC_OscConfig>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800104e:	f000 f8e3 	bl	8001218 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001052:	230f      	movs	r3, #15
 8001054:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001056:	2300      	movs	r3, #0
 8001058:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f001 faa2 	bl	80025b4 <HAL_RCC_ClockConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001076:	f000 f8cf 	bl	8001218 <Error_Handler>
  }
}
 800107a:	bf00      	nop
 800107c:	3740      	adds	r7, #64	; 0x40
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800108a:	f107 0308 	add.w	r3, r7, #8
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001098:	463b      	mov	r3, r7
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010a0:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <MX_TIM2_Init+0x94>)
 80010a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80010a8:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <MX_TIM2_Init+0x94>)
 80010aa:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80010ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b0:	4b19      	ldr	r3, [pc, #100]	; (8001118 <MX_TIM2_Init+0x94>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80010b6:	4b18      	ldr	r3, [pc, #96]	; (8001118 <MX_TIM2_Init+0x94>)
 80010b8:	2209      	movs	r2, #9
 80010ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010bc:	4b16      	ldr	r3, [pc, #88]	; (8001118 <MX_TIM2_Init+0x94>)
 80010be:	2200      	movs	r2, #0
 80010c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <MX_TIM2_Init+0x94>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010c8:	4813      	ldr	r0, [pc, #76]	; (8001118 <MX_TIM2_Init+0x94>)
 80010ca:	f001 fbcf 	bl	800286c <HAL_TIM_Base_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010d4:	f000 f8a0 	bl	8001218 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010de:	f107 0308 	add.w	r3, r7, #8
 80010e2:	4619      	mov	r1, r3
 80010e4:	480c      	ldr	r0, [pc, #48]	; (8001118 <MX_TIM2_Init+0x94>)
 80010e6:	f001 fd4d 	bl	8002b84 <HAL_TIM_ConfigClockSource>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010f0:	f000 f892 	bl	8001218 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f4:	2300      	movs	r3, #0
 80010f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010fc:	463b      	mov	r3, r7
 80010fe:	4619      	mov	r1, r3
 8001100:	4805      	ldr	r0, [pc, #20]	; (8001118 <MX_TIM2_Init+0x94>)
 8001102:	f001 ff25 	bl	8002f50 <HAL_TIMEx_MasterConfigSynchronization>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800110c:	f000 f884 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	200000c0 	.word	0x200000c0

0800111c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b088      	sub	sp, #32
 8001120:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001122:	f107 0310 	add.w	r3, r7, #16
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001130:	4b2f      	ldr	r3, [pc, #188]	; (80011f0 <MX_GPIO_Init+0xd4>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	4a2e      	ldr	r2, [pc, #184]	; (80011f0 <MX_GPIO_Init+0xd4>)
 8001136:	f043 0310 	orr.w	r3, r3, #16
 800113a:	6193      	str	r3, [r2, #24]
 800113c:	4b2c      	ldr	r3, [pc, #176]	; (80011f0 <MX_GPIO_Init+0xd4>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	f003 0310 	and.w	r3, r3, #16
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001148:	4b29      	ldr	r3, [pc, #164]	; (80011f0 <MX_GPIO_Init+0xd4>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	4a28      	ldr	r2, [pc, #160]	; (80011f0 <MX_GPIO_Init+0xd4>)
 800114e:	f043 0304 	orr.w	r3, r3, #4
 8001152:	6193      	str	r3, [r2, #24]
 8001154:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <MX_GPIO_Init+0xd4>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	f003 0304 	and.w	r3, r3, #4
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001160:	4b23      	ldr	r3, [pc, #140]	; (80011f0 <MX_GPIO_Init+0xd4>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	4a22      	ldr	r2, [pc, #136]	; (80011f0 <MX_GPIO_Init+0xd4>)
 8001166:	f043 0308 	orr.w	r3, r3, #8
 800116a:	6193      	str	r3, [r2, #24]
 800116c:	4b20      	ldr	r3, [pc, #128]	; (80011f0 <MX_GPIO_Init+0xd4>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f003 0308 	and.w	r3, r3, #8
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_RED_Pin|LED_2_GREEN_Pin|LED_3_YELLOW_Pin|LED_4_RED_Pin
 8001178:	2200      	movs	r2, #0
 800117a:	f649 71fe 	movw	r1, #40958	; 0x9ffe
 800117e:	481d      	ldr	r0, [pc, #116]	; (80011f4 <MX_GPIO_Init+0xd8>)
 8001180:	f000 ff67 	bl	8002052 <HAL_GPIO_WritePin>
                          |LED_5_GREEN_Pin|LED_6_YELLOW_Pin|LED_7_RED_Pin|LED_8_GREEN_Pin
                          |LED_9_YELLOW_Pin|LED_10_RED_Pin|LED_11_GREEN_Pin|LED_12_YELLOW_Pin
                          |LED_RED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN0_Pin|EN1_Pin|EN2_Pin|SEG6_Pin
 8001184:	2200      	movs	r2, #0
 8001186:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800118a:	481b      	ldr	r0, [pc, #108]	; (80011f8 <MX_GPIO_Init+0xdc>)
 800118c:	f000 ff61 	bl	8002052 <HAL_GPIO_WritePin>
                          |EN3_Pin|SEG0_Pin|SEG1_Pin|SEG2_Pin
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8001190:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001194:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800119a:	2301      	movs	r3, #1
 800119c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800119e:	f107 0310 	add.w	r3, r7, #16
 80011a2:	4619      	mov	r1, r3
 80011a4:	4815      	ldr	r0, [pc, #84]	; (80011fc <MX_GPIO_Init+0xe0>)
 80011a6:	f000 fdc3 	bl	8001d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_RED_Pin LED_2_GREEN_Pin LED_3_YELLOW_Pin LED_4_RED_Pin
                           LED_5_GREEN_Pin LED_6_YELLOW_Pin LED_7_RED_Pin LED_8_GREEN_Pin
                           LED_9_YELLOW_Pin LED_10_RED_Pin LED_11_GREEN_Pin LED_12_YELLOW_Pin
                           LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_1_RED_Pin|LED_2_GREEN_Pin|LED_3_YELLOW_Pin|LED_4_RED_Pin
 80011aa:	f649 73fe 	movw	r3, #40958	; 0x9ffe
 80011ae:	613b      	str	r3, [r7, #16]
                          |LED_5_GREEN_Pin|LED_6_YELLOW_Pin|LED_7_RED_Pin|LED_8_GREEN_Pin
                          |LED_9_YELLOW_Pin|LED_10_RED_Pin|LED_11_GREEN_Pin|LED_12_YELLOW_Pin
                          |LED_RED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b0:	2301      	movs	r3, #1
 80011b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2302      	movs	r3, #2
 80011ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011bc:	f107 0310 	add.w	r3, r7, #16
 80011c0:	4619      	mov	r1, r3
 80011c2:	480c      	ldr	r0, [pc, #48]	; (80011f4 <MX_GPIO_Init+0xd8>)
 80011c4:	f000 fdb4 	bl	8001d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin SEG6_Pin
                           EN3_Pin SEG0_Pin SEG1_Pin SEG2_Pin
                           SEG3_Pin SEG4_Pin SEG5_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|SEG6_Pin
 80011c8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80011cc:	613b      	str	r3, [r7, #16]
                          |EN3_Pin|SEG0_Pin|SEG1_Pin|SEG2_Pin
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2302      	movs	r3, #2
 80011d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011da:	f107 0310 	add.w	r3, r7, #16
 80011de:	4619      	mov	r1, r3
 80011e0:	4805      	ldr	r0, [pc, #20]	; (80011f8 <MX_GPIO_Init+0xdc>)
 80011e2:	f000 fda5 	bl	8001d30 <HAL_GPIO_Init>

}
 80011e6:	bf00      	nop
 80011e8:	3720      	adds	r7, #32
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40010800 	.word	0x40010800
 80011f8:	40010c00 	.word	0x40010c00
 80011fc:	40011000 	.word	0x40011000

08001200 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8001208:	f000 f824 	bl	8001254 <SCH_Update>
	getKeyInput();
 800120c:	f7fe ffec 	bl	80001e8 <getKeyInput>
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800121c:	b672      	cpsid	i
}
 800121e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001220:	e7fe      	b.n	8001220 <Error_Handler+0x8>

08001222 <SCH_Init>:

sTask SCH_tasks_G[SCH_MAX_TASKS];
uint8_t current_index_task =0;
//char Error_code_G;

void SCH_Init(void){
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
	 uint8_t i ;
	 for (i = 0; i <SCH_MAX_TASKS; i++) {
 8001228:	2300      	movs	r3, #0
 800122a:	71fb      	strb	r3, [r7, #7]
 800122c:	e006      	b.n	800123c <SCH_Init+0x1a>
	 SCH_Delete_Task(i);
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	4618      	mov	r0, r3
 8001232:	f000 f91d 	bl	8001470 <SCH_Delete_Task>
	 for (i = 0; i <SCH_MAX_TASKS; i++) {
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	3301      	adds	r3, #1
 800123a:	71fb      	strb	r3, [r7, #7]
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	2b27      	cmp	r3, #39	; 0x27
 8001240:	d9f5      	bls.n	800122e <SCH_Init+0xc>
	 }
//	 Error_code_G = 0;
	 Timer_init();
 8001242:	f000 f953 	bl	80014ec <Timer_init>
	 Watchdog_init();
 8001246:	f000 f957 	bl	80014f8 <Watchdog_init>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <SCH_Update>:
void SCH_Update(void){
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0

	 uint8_t Index;

	 for (Index = 0; Index <SCH_MAX_TASKS; Index++) {
 800125a:	2300      	movs	r3, #0
 800125c:	71fb      	strb	r3, [r7, #7]
 800125e:	e05c      	b.n	800131a <SCH_Update+0xc6>
		 if (SCH_tasks_G[Index].pTask){
 8001260:	79fa      	ldrb	r2, [r7, #7]
 8001262:	4932      	ldr	r1, [pc, #200]	; (800132c <SCH_Update+0xd8>)
 8001264:	4613      	mov	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	440b      	add	r3, r1
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d04f      	beq.n	8001314 <SCH_Update+0xc0>
			 if (SCH_tasks_G[Index].Delay == 0) {
 8001274:	79fa      	ldrb	r2, [r7, #7]
 8001276:	492d      	ldr	r1, [pc, #180]	; (800132c <SCH_Update+0xd8>)
 8001278:	4613      	mov	r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4413      	add	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	440b      	add	r3, r1
 8001282:	3304      	adds	r3, #4
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d132      	bne.n	80012f0 <SCH_Update+0x9c>
				 SCH_tasks_G[Index].RunMe+= 1;
 800128a:	79fa      	ldrb	r2, [r7, #7]
 800128c:	4927      	ldr	r1, [pc, #156]	; (800132c <SCH_Update+0xd8>)
 800128e:	4613      	mov	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	440b      	add	r3, r1
 8001298:	330c      	adds	r3, #12
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	79fa      	ldrb	r2, [r7, #7]
 800129e:	3301      	adds	r3, #1
 80012a0:	b2d8      	uxtb	r0, r3
 80012a2:	4922      	ldr	r1, [pc, #136]	; (800132c <SCH_Update+0xd8>)
 80012a4:	4613      	mov	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4413      	add	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	440b      	add	r3, r1
 80012ae:	330c      	adds	r3, #12
 80012b0:	4602      	mov	r2, r0
 80012b2:	701a      	strb	r2, [r3, #0]
				 if (SCH_tasks_G[Index].Period) {
 80012b4:	79fa      	ldrb	r2, [r7, #7]
 80012b6:	491d      	ldr	r1, [pc, #116]	; (800132c <SCH_Update+0xd8>)
 80012b8:	4613      	mov	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	440b      	add	r3, r1
 80012c2:	3308      	adds	r3, #8
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d024      	beq.n	8001314 <SCH_Update+0xc0>
				 SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 80012ca:	79f9      	ldrb	r1, [r7, #7]
 80012cc:	79fa      	ldrb	r2, [r7, #7]
 80012ce:	4817      	ldr	r0, [pc, #92]	; (800132c <SCH_Update+0xd8>)
 80012d0:	460b      	mov	r3, r1
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	440b      	add	r3, r1
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4403      	add	r3, r0
 80012da:	3308      	adds	r3, #8
 80012dc:	6819      	ldr	r1, [r3, #0]
 80012de:	4813      	ldr	r0, [pc, #76]	; (800132c <SCH_Update+0xd8>)
 80012e0:	4613      	mov	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4413      	add	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4403      	add	r3, r0
 80012ea:	3304      	adds	r3, #4
 80012ec:	6019      	str	r1, [r3, #0]
 80012ee:	e011      	b.n	8001314 <SCH_Update+0xc0>
				 }
			 } else {

			 SCH_tasks_G[Index].Delay --;
 80012f0:	79fa      	ldrb	r2, [r7, #7]
 80012f2:	490e      	ldr	r1, [pc, #56]	; (800132c <SCH_Update+0xd8>)
 80012f4:	4613      	mov	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	440b      	add	r3, r1
 80012fe:	3304      	adds	r3, #4
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	1e59      	subs	r1, r3, #1
 8001304:	4809      	ldr	r0, [pc, #36]	; (800132c <SCH_Update+0xd8>)
 8001306:	4613      	mov	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4403      	add	r3, r0
 8001310:	3304      	adds	r3, #4
 8001312:	6019      	str	r1, [r3, #0]
	 for (Index = 0; Index <SCH_MAX_TASKS; Index++) {
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	3301      	adds	r3, #1
 8001318:	71fb      	strb	r3, [r7, #7]
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	2b27      	cmp	r3, #39	; 0x27
 800131e:	d99f      	bls.n	8001260 <SCH_Update+0xc>
			 }
		 }
	 }
}
 8001320:	bf00      	nop
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr
 800132c:	20000108 	.word	0x20000108

08001330 <SCH_ADD_TASK>:

void SCH_ADD_TASK(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 8001330:	b480      	push	{r7}
 8001332:	b087      	sub	sp, #28
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
	 uint8_t Index = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	75fb      	strb	r3, [r7, #23]
	 while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 8001340:	e002      	b.n	8001348 <SCH_ADD_TASK+0x18>
	 {
	 Index++;
 8001342:	7dfb      	ldrb	r3, [r7, #23]
 8001344:	3301      	adds	r3, #1
 8001346:	75fb      	strb	r3, [r7, #23]
	 while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 8001348:	7dfa      	ldrb	r2, [r7, #23]
 800134a:	4921      	ldr	r1, [pc, #132]	; (80013d0 <SCH_ADD_TASK+0xa0>)
 800134c:	4613      	mov	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	440b      	add	r3, r1
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d002      	beq.n	8001362 <SCH_ADD_TASK+0x32>
 800135c:	7dfb      	ldrb	r3, [r7, #23]
 800135e:	2b27      	cmp	r3, #39	; 0x27
 8001360:	d9ef      	bls.n	8001342 <SCH_ADD_TASK+0x12>
//	 if (Index == SCH_MAX_TASKS)
//	 {
////	  Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
//	  return SCH_MAX_TASKS;
//	 }
	  SCH_tasks_G[Index].pTask = pFunction;
 8001362:	7dfa      	ldrb	r2, [r7, #23]
 8001364:	491a      	ldr	r1, [pc, #104]	; (80013d0 <SCH_ADD_TASK+0xa0>)
 8001366:	4613      	mov	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	440b      	add	r3, r1
 8001370:	68fa      	ldr	r2, [r7, #12]
 8001372:	601a      	str	r2, [r3, #0]
	  SCH_tasks_G[Index].Delay =DELAY;
 8001374:	7dfa      	ldrb	r2, [r7, #23]
 8001376:	4916      	ldr	r1, [pc, #88]	; (80013d0 <SCH_ADD_TASK+0xa0>)
 8001378:	4613      	mov	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	440b      	add	r3, r1
 8001382:	3304      	adds	r3, #4
 8001384:	68ba      	ldr	r2, [r7, #8]
 8001386:	601a      	str	r2, [r3, #0]
	  SCH_tasks_G[Index].Period =PERIOD;
 8001388:	7dfa      	ldrb	r2, [r7, #23]
 800138a:	4911      	ldr	r1, [pc, #68]	; (80013d0 <SCH_ADD_TASK+0xa0>)
 800138c:	4613      	mov	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	440b      	add	r3, r1
 8001396:	3308      	adds	r3, #8
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	601a      	str	r2, [r3, #0]
	  SCH_tasks_G[Index].RunMe= 0;
 800139c:	7dfa      	ldrb	r2, [r7, #23]
 800139e:	490c      	ldr	r1, [pc, #48]	; (80013d0 <SCH_ADD_TASK+0xa0>)
 80013a0:	4613      	mov	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	440b      	add	r3, r1
 80013aa:	330c      	adds	r3, #12
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]

	  SCH_tasks_G[Index].TaskID = Index;
 80013b0:	7dfa      	ldrb	r2, [r7, #23]
 80013b2:	7df9      	ldrb	r1, [r7, #23]
 80013b4:	4806      	ldr	r0, [pc, #24]	; (80013d0 <SCH_ADD_TASK+0xa0>)
 80013b6:	4613      	mov	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	4413      	add	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4403      	add	r3, r0
 80013c0:	3310      	adds	r3, #16
 80013c2:	6019      	str	r1, [r3, #0]
}
 80013c4:	bf00      	nop
 80013c6:	371c      	adds	r7, #28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20000108 	.word	0x20000108

080013d4 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
	uint8_t Index;
	for (Index = 0; Index <SCH_MAX_TASKS; Index++){
 80013da:	2300      	movs	r3, #0
 80013dc:	71fb      	strb	r3, [r7, #7]
 80013de:	e039      	b.n	8001454 <SCH_Dispatch_Tasks+0x80>
		if (SCH_tasks_G[Index].RunMe> 0) {
 80013e0:	79fa      	ldrb	r2, [r7, #7]
 80013e2:	4922      	ldr	r1, [pc, #136]	; (800146c <SCH_Dispatch_Tasks+0x98>)
 80013e4:	4613      	mov	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	440b      	add	r3, r1
 80013ee:	330c      	adds	r3, #12
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d02b      	beq.n	800144e <SCH_Dispatch_Tasks+0x7a>
			(*SCH_tasks_G[Index].pTask)();
 80013f6:	79fa      	ldrb	r2, [r7, #7]
 80013f8:	491c      	ldr	r1, [pc, #112]	; (800146c <SCH_Dispatch_Tasks+0x98>)
 80013fa:	4613      	mov	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	440b      	add	r3, r1
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4798      	blx	r3
			SCH_tasks_G[Index].RunMe --;
 8001408:	79fa      	ldrb	r2, [r7, #7]
 800140a:	4918      	ldr	r1, [pc, #96]	; (800146c <SCH_Dispatch_Tasks+0x98>)
 800140c:	4613      	mov	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	440b      	add	r3, r1
 8001416:	330c      	adds	r3, #12
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	3b01      	subs	r3, #1
 800141c:	b2d8      	uxtb	r0, r3
 800141e:	4913      	ldr	r1, [pc, #76]	; (800146c <SCH_Dispatch_Tasks+0x98>)
 8001420:	4613      	mov	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	440b      	add	r3, r1
 800142a:	330c      	adds	r3, #12
 800142c:	4602      	mov	r2, r0
 800142e:	701a      	strb	r2, [r3, #0]
			if (SCH_tasks_G[Index].Period == 0)
 8001430:	79fa      	ldrb	r2, [r7, #7]
 8001432:	490e      	ldr	r1, [pc, #56]	; (800146c <SCH_Dispatch_Tasks+0x98>)
 8001434:	4613      	mov	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	440b      	add	r3, r1
 800143e:	3308      	adds	r3, #8
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d103      	bne.n	800144e <SCH_Dispatch_Tasks+0x7a>
			{
			SCH_Delete_Task(Index);
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	4618      	mov	r0, r3
 800144a:	f000 f811 	bl	8001470 <SCH_Delete_Task>
	for (Index = 0; Index <SCH_MAX_TASKS; Index++){
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	3301      	adds	r3, #1
 8001452:	71fb      	strb	r3, [r7, #7]
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	2b27      	cmp	r3, #39	; 0x27
 8001458:	d9c2      	bls.n	80013e0 <SCH_Dispatch_Tasks+0xc>
			}
		}
	}

	SCH_Report_Status();
 800145a:	f000 f83b 	bl	80014d4 <SCH_Report_Status>

	SCH_Go_To_Sleep();
 800145e:	f000 f83f 	bl	80014e0 <SCH_Go_To_Sleep>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000108 	.word	0x20000108

08001470 <SCH_Delete_Task>:

void SCH_Delete_Task (uint32_t TASK_INDEX){
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
//		 Return_code = RETURN_ERROR;
//	 } else {
//		 Return_code = RETURN_NORMAL;
//	 }

	 SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
 8001478:	4915      	ldr	r1, [pc, #84]	; (80014d0 <SCH_Delete_Task+0x60>)
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	4613      	mov	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	4413      	add	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	440b      	add	r3, r1
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
	 SCH_tasks_G[TASK_INDEX]. Delay = 0;
 800148a:	4911      	ldr	r1, [pc, #68]	; (80014d0 <SCH_Delete_Task+0x60>)
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	440b      	add	r3, r1
 8001498:	3304      	adds	r3, #4
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
	 SCH_tasks_G[TASK_INDEX]. Period = 0;
 800149e:	490c      	ldr	r1, [pc, #48]	; (80014d0 <SCH_Delete_Task+0x60>)
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	4613      	mov	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	440b      	add	r3, r1
 80014ac:	3308      	adds	r3, #8
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
	 SCH_tasks_G[TASK_INDEX].RunMe = 0;
 80014b2:	4907      	ldr	r1, [pc, #28]	; (80014d0 <SCH_Delete_Task+0x60>)
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	4613      	mov	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	440b      	add	r3, r1
 80014c0:	330c      	adds	r3, #12
 80014c2:	2200      	movs	r2, #0
 80014c4:	701a      	strb	r2, [r3, #0]
//	 return Return_code; // return status
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr
 80014d0:	20000108 	.word	0x20000108

080014d4 <SCH_Report_Status>:
void SCH_Report_Status(void){
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0

}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr

080014e0 <SCH_Go_To_Sleep>:

void SCH_Go_To_Sleep(void){
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0

}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr

080014ec <Timer_init>:

void Timer_init(void){
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0

}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr

080014f8 <Watchdog_init>:
void Watchdog_init(void){
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0

}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr

08001504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <HAL_MspInit+0x5c>)
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	4a14      	ldr	r2, [pc, #80]	; (8001560 <HAL_MspInit+0x5c>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6193      	str	r3, [r2, #24]
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_MspInit+0x5c>)
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <HAL_MspInit+0x5c>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	4a0e      	ldr	r2, [pc, #56]	; (8001560 <HAL_MspInit+0x5c>)
 8001528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800152c:	61d3      	str	r3, [r2, #28]
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <HAL_MspInit+0x5c>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800153a:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <HAL_MspInit+0x60>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	4a04      	ldr	r2, [pc, #16]	; (8001564 <HAL_MspInit+0x60>)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001556:	bf00      	nop
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	40021000 	.word	0x40021000
 8001564:	40010000 	.word	0x40010000

08001568 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001578:	d113      	bne.n	80015a2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800157a:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <HAL_TIM_Base_MspInit+0x44>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	4a0b      	ldr	r2, [pc, #44]	; (80015ac <HAL_TIM_Base_MspInit+0x44>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	61d3      	str	r3, [r2, #28]
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <HAL_TIM_Base_MspInit+0x44>)
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	2100      	movs	r1, #0
 8001596:	201c      	movs	r0, #28
 8001598:	f000 fb93 	bl	8001cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800159c:	201c      	movs	r0, #28
 800159e:	f000 fbac 	bl	8001cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40021000 	.word	0x40021000

080015b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <NMI_Handler+0x4>

080015b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ba:	e7fe      	b.n	80015ba <HardFault_Handler+0x4>

080015bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <MemManage_Handler+0x4>

080015c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c6:	e7fe      	b.n	80015c6 <BusFault_Handler+0x4>

080015c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <UsageFault_Handler+0x4>

080015ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr

080015da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr

080015e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr

080015f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f6:	f000 fa71 	bl	8001adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001604:	4802      	ldr	r0, [pc, #8]	; (8001610 <TIM2_IRQHandler+0x10>)
 8001606:	f001 f9cd 	bl	80029a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	200000c0 	.word	0x200000c0

08001614 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr

08001620 <traffic_light>:
 *      Author: TIEN DUY
 */

#include "traffic_light.h"

void traffic_light(int status_light) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3b0b      	subs	r3, #11
 800162c:	2b06      	cmp	r3, #6
 800162e:	f200 81e1 	bhi.w	80019f4 <traffic_light+0x3d4>
 8001632:	a201      	add	r2, pc, #4	; (adr r2, 8001638 <traffic_light+0x18>)
 8001634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001638:	08001655 	.word	0x08001655
 800163c:	080016d9 	.word	0x080016d9
 8001640:	0800175d 	.word	0x0800175d
 8001644:	080017e1 	.word	0x080017e1
 8001648:	08001865 	.word	0x08001865
 800164c:	080018e9 	.word	0x080018e9
 8001650:	08001971 	.word	0x08001971
	switch (status_light) {
	case RED_GREEN:
		HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, RESET);
 8001654:	2200      	movs	r2, #0
 8001656:	2102      	movs	r1, #2
 8001658:	48c4      	ldr	r0, [pc, #784]	; (800196c <traffic_light+0x34c>)
 800165a:	f000 fcfa 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, RESET);
 800165e:	2200      	movs	r2, #0
 8001660:	2104      	movs	r1, #4
 8001662:	48c2      	ldr	r0, [pc, #776]	; (800196c <traffic_light+0x34c>)
 8001664:	f000 fcf5 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_YELLOW_GPIO_Port, LED_3_YELLOW_Pin, SET);
 8001668:	2201      	movs	r2, #1
 800166a:	2108      	movs	r1, #8
 800166c:	48bf      	ldr	r0, [pc, #764]	; (800196c <traffic_light+0x34c>)
 800166e:	f000 fcf0 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_4_RED_GPIO_Port, LED_4_RED_Pin, SET);
 8001672:	2201      	movs	r2, #1
 8001674:	2110      	movs	r1, #16
 8001676:	48bd      	ldr	r0, [pc, #756]	; (800196c <traffic_light+0x34c>)
 8001678:	f000 fceb 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_5_GREEN_GPIO_Port, LED_5_GREEN_Pin, SET);
 800167c:	2201      	movs	r2, #1
 800167e:	2120      	movs	r1, #32
 8001680:	48ba      	ldr	r0, [pc, #744]	; (800196c <traffic_light+0x34c>)
 8001682:	f000 fce6 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_6_YELLOW_GPIO_Port, LED_6_YELLOW_Pin, SET);
 8001686:	2201      	movs	r2, #1
 8001688:	2140      	movs	r1, #64	; 0x40
 800168a:	48b8      	ldr	r0, [pc, #736]	; (800196c <traffic_light+0x34c>)
 800168c:	f000 fce1 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_7_RED_GPIO_Port, LED_7_RED_Pin, RESET);
 8001690:	2200      	movs	r2, #0
 8001692:	2180      	movs	r1, #128	; 0x80
 8001694:	48b5      	ldr	r0, [pc, #724]	; (800196c <traffic_light+0x34c>)
 8001696:	f000 fcdc 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_8_GREEN_GPIO_Port, LED_8_GREEN_Pin, RESET);
 800169a:	2200      	movs	r2, #0
 800169c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a0:	48b2      	ldr	r0, [pc, #712]	; (800196c <traffic_light+0x34c>)
 80016a2:	f000 fcd6 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_9_YELLOW_GPIO_Port, LED_9_YELLOW_Pin, SET);
 80016a6:	2201      	movs	r2, #1
 80016a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016ac:	48af      	ldr	r0, [pc, #700]	; (800196c <traffic_light+0x34c>)
 80016ae:	f000 fcd0 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_10_RED_GPIO_Port, LED_10_RED_Pin, SET);
 80016b2:	2201      	movs	r2, #1
 80016b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016b8:	48ac      	ldr	r0, [pc, #688]	; (800196c <traffic_light+0x34c>)
 80016ba:	f000 fcca 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_11_GREEN_GPIO_Port, LED_11_GREEN_Pin, SET);
 80016be:	2201      	movs	r2, #1
 80016c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016c4:	48a9      	ldr	r0, [pc, #676]	; (800196c <traffic_light+0x34c>)
 80016c6:	f000 fcc4 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_12_YELLOW_GPIO_Port, LED_12_YELLOW_Pin, SET);
 80016ca:	2201      	movs	r2, #1
 80016cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016d0:	48a6      	ldr	r0, [pc, #664]	; (800196c <traffic_light+0x34c>)
 80016d2:	f000 fcbe 	bl	8002052 <HAL_GPIO_WritePin>
		break;
 80016d6:	e18e      	b.n	80019f6 <traffic_light+0x3d6>
	case RED_YELLOW:
		HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, RESET);
 80016d8:	2200      	movs	r2, #0
 80016da:	2102      	movs	r1, #2
 80016dc:	48a3      	ldr	r0, [pc, #652]	; (800196c <traffic_light+0x34c>)
 80016de:	f000 fcb8 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, SET);
 80016e2:	2201      	movs	r2, #1
 80016e4:	2104      	movs	r1, #4
 80016e6:	48a1      	ldr	r0, [pc, #644]	; (800196c <traffic_light+0x34c>)
 80016e8:	f000 fcb3 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_YELLOW_GPIO_Port, LED_3_YELLOW_Pin, RESET);
 80016ec:	2200      	movs	r2, #0
 80016ee:	2108      	movs	r1, #8
 80016f0:	489e      	ldr	r0, [pc, #632]	; (800196c <traffic_light+0x34c>)
 80016f2:	f000 fcae 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_4_RED_GPIO_Port, LED_4_RED_Pin, SET);
 80016f6:	2201      	movs	r2, #1
 80016f8:	2110      	movs	r1, #16
 80016fa:	489c      	ldr	r0, [pc, #624]	; (800196c <traffic_light+0x34c>)
 80016fc:	f000 fca9 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_5_GREEN_GPIO_Port, LED_5_GREEN_Pin, SET);
 8001700:	2201      	movs	r2, #1
 8001702:	2120      	movs	r1, #32
 8001704:	4899      	ldr	r0, [pc, #612]	; (800196c <traffic_light+0x34c>)
 8001706:	f000 fca4 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_6_YELLOW_GPIO_Port, LED_6_YELLOW_Pin, SET);
 800170a:	2201      	movs	r2, #1
 800170c:	2140      	movs	r1, #64	; 0x40
 800170e:	4897      	ldr	r0, [pc, #604]	; (800196c <traffic_light+0x34c>)
 8001710:	f000 fc9f 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_7_RED_GPIO_Port, LED_7_RED_Pin, RESET);
 8001714:	2200      	movs	r2, #0
 8001716:	2180      	movs	r1, #128	; 0x80
 8001718:	4894      	ldr	r0, [pc, #592]	; (800196c <traffic_light+0x34c>)
 800171a:	f000 fc9a 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_8_GREEN_GPIO_Port, LED_8_GREEN_Pin, SET);
 800171e:	2201      	movs	r2, #1
 8001720:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001724:	4891      	ldr	r0, [pc, #580]	; (800196c <traffic_light+0x34c>)
 8001726:	f000 fc94 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_9_YELLOW_GPIO_Port, LED_9_YELLOW_Pin, RESET);
 800172a:	2200      	movs	r2, #0
 800172c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001730:	488e      	ldr	r0, [pc, #568]	; (800196c <traffic_light+0x34c>)
 8001732:	f000 fc8e 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_10_RED_GPIO_Port, LED_10_RED_Pin, SET);
 8001736:	2201      	movs	r2, #1
 8001738:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800173c:	488b      	ldr	r0, [pc, #556]	; (800196c <traffic_light+0x34c>)
 800173e:	f000 fc88 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_11_GREEN_GPIO_Port, LED_11_GREEN_Pin, SET);
 8001742:	2201      	movs	r2, #1
 8001744:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001748:	4888      	ldr	r0, [pc, #544]	; (800196c <traffic_light+0x34c>)
 800174a:	f000 fc82 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_12_YELLOW_GPIO_Port, LED_12_YELLOW_Pin, SET);
 800174e:	2201      	movs	r2, #1
 8001750:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001754:	4885      	ldr	r0, [pc, #532]	; (800196c <traffic_light+0x34c>)
 8001756:	f000 fc7c 	bl	8002052 <HAL_GPIO_WritePin>
		break;
 800175a:	e14c      	b.n	80019f6 <traffic_light+0x3d6>
	case GREEN_RED:
		HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, SET);
 800175c:	2201      	movs	r2, #1
 800175e:	2102      	movs	r1, #2
 8001760:	4882      	ldr	r0, [pc, #520]	; (800196c <traffic_light+0x34c>)
 8001762:	f000 fc76 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, SET);
 8001766:	2201      	movs	r2, #1
 8001768:	2104      	movs	r1, #4
 800176a:	4880      	ldr	r0, [pc, #512]	; (800196c <traffic_light+0x34c>)
 800176c:	f000 fc71 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_YELLOW_GPIO_Port, LED_3_YELLOW_Pin, SET);
 8001770:	2201      	movs	r2, #1
 8001772:	2108      	movs	r1, #8
 8001774:	487d      	ldr	r0, [pc, #500]	; (800196c <traffic_light+0x34c>)
 8001776:	f000 fc6c 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_4_RED_GPIO_Port, LED_4_RED_Pin, RESET);
 800177a:	2200      	movs	r2, #0
 800177c:	2110      	movs	r1, #16
 800177e:	487b      	ldr	r0, [pc, #492]	; (800196c <traffic_light+0x34c>)
 8001780:	f000 fc67 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_5_GREEN_GPIO_Port, LED_5_GREEN_Pin, RESET);
 8001784:	2200      	movs	r2, #0
 8001786:	2120      	movs	r1, #32
 8001788:	4878      	ldr	r0, [pc, #480]	; (800196c <traffic_light+0x34c>)
 800178a:	f000 fc62 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_6_YELLOW_GPIO_Port, LED_6_YELLOW_Pin, SET);
 800178e:	2201      	movs	r2, #1
 8001790:	2140      	movs	r1, #64	; 0x40
 8001792:	4876      	ldr	r0, [pc, #472]	; (800196c <traffic_light+0x34c>)
 8001794:	f000 fc5d 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_7_RED_GPIO_Port, LED_7_RED_Pin, SET);
 8001798:	2201      	movs	r2, #1
 800179a:	2180      	movs	r1, #128	; 0x80
 800179c:	4873      	ldr	r0, [pc, #460]	; (800196c <traffic_light+0x34c>)
 800179e:	f000 fc58 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_8_GREEN_GPIO_Port, LED_8_GREEN_Pin, SET);
 80017a2:	2201      	movs	r2, #1
 80017a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017a8:	4870      	ldr	r0, [pc, #448]	; (800196c <traffic_light+0x34c>)
 80017aa:	f000 fc52 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_9_YELLOW_GPIO_Port, LED_9_YELLOW_Pin, SET);
 80017ae:	2201      	movs	r2, #1
 80017b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017b4:	486d      	ldr	r0, [pc, #436]	; (800196c <traffic_light+0x34c>)
 80017b6:	f000 fc4c 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_10_RED_GPIO_Port, LED_10_RED_Pin, RESET);
 80017ba:	2200      	movs	r2, #0
 80017bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017c0:	486a      	ldr	r0, [pc, #424]	; (800196c <traffic_light+0x34c>)
 80017c2:	f000 fc46 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_11_GREEN_GPIO_Port, LED_11_GREEN_Pin, RESET);
 80017c6:	2200      	movs	r2, #0
 80017c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017cc:	4867      	ldr	r0, [pc, #412]	; (800196c <traffic_light+0x34c>)
 80017ce:	f000 fc40 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_12_YELLOW_GPIO_Port, LED_12_YELLOW_Pin, SET);
 80017d2:	2201      	movs	r2, #1
 80017d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017d8:	4864      	ldr	r0, [pc, #400]	; (800196c <traffic_light+0x34c>)
 80017da:	f000 fc3a 	bl	8002052 <HAL_GPIO_WritePin>
		break;
 80017de:	e10a      	b.n	80019f6 <traffic_light+0x3d6>
	case YELLOW_RED:
		HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, SET);
 80017e0:	2201      	movs	r2, #1
 80017e2:	2102      	movs	r1, #2
 80017e4:	4861      	ldr	r0, [pc, #388]	; (800196c <traffic_light+0x34c>)
 80017e6:	f000 fc34 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, SET);
 80017ea:	2201      	movs	r2, #1
 80017ec:	2104      	movs	r1, #4
 80017ee:	485f      	ldr	r0, [pc, #380]	; (800196c <traffic_light+0x34c>)
 80017f0:	f000 fc2f 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_YELLOW_GPIO_Port, LED_3_YELLOW_Pin, SET);
 80017f4:	2201      	movs	r2, #1
 80017f6:	2108      	movs	r1, #8
 80017f8:	485c      	ldr	r0, [pc, #368]	; (800196c <traffic_light+0x34c>)
 80017fa:	f000 fc2a 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_4_RED_GPIO_Port, LED_4_RED_Pin, RESET);
 80017fe:	2200      	movs	r2, #0
 8001800:	2110      	movs	r1, #16
 8001802:	485a      	ldr	r0, [pc, #360]	; (800196c <traffic_light+0x34c>)
 8001804:	f000 fc25 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_5_GREEN_GPIO_Port, LED_5_GREEN_Pin, SET);
 8001808:	2201      	movs	r2, #1
 800180a:	2120      	movs	r1, #32
 800180c:	4857      	ldr	r0, [pc, #348]	; (800196c <traffic_light+0x34c>)
 800180e:	f000 fc20 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_6_YELLOW_GPIO_Port, LED_6_YELLOW_Pin, RESET);
 8001812:	2200      	movs	r2, #0
 8001814:	2140      	movs	r1, #64	; 0x40
 8001816:	4855      	ldr	r0, [pc, #340]	; (800196c <traffic_light+0x34c>)
 8001818:	f000 fc1b 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_7_RED_GPIO_Port, LED_7_RED_Pin, SET);
 800181c:	2201      	movs	r2, #1
 800181e:	2180      	movs	r1, #128	; 0x80
 8001820:	4852      	ldr	r0, [pc, #328]	; (800196c <traffic_light+0x34c>)
 8001822:	f000 fc16 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_8_GREEN_GPIO_Port, LED_8_GREEN_Pin, SET);
 8001826:	2201      	movs	r2, #1
 8001828:	f44f 7180 	mov.w	r1, #256	; 0x100
 800182c:	484f      	ldr	r0, [pc, #316]	; (800196c <traffic_light+0x34c>)
 800182e:	f000 fc10 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_9_YELLOW_GPIO_Port, LED_9_YELLOW_Pin, SET);
 8001832:	2201      	movs	r2, #1
 8001834:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001838:	484c      	ldr	r0, [pc, #304]	; (800196c <traffic_light+0x34c>)
 800183a:	f000 fc0a 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_10_RED_GPIO_Port, LED_10_RED_Pin, RESET);
 800183e:	2200      	movs	r2, #0
 8001840:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001844:	4849      	ldr	r0, [pc, #292]	; (800196c <traffic_light+0x34c>)
 8001846:	f000 fc04 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_11_GREEN_GPIO_Port, LED_11_GREEN_Pin, SET);
 800184a:	2201      	movs	r2, #1
 800184c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001850:	4846      	ldr	r0, [pc, #280]	; (800196c <traffic_light+0x34c>)
 8001852:	f000 fbfe 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_12_YELLOW_GPIO_Port, LED_12_YELLOW_Pin, RESET);
 8001856:	2200      	movs	r2, #0
 8001858:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800185c:	4843      	ldr	r0, [pc, #268]	; (800196c <traffic_light+0x34c>)
 800185e:	f000 fbf8 	bl	8002052 <HAL_GPIO_WritePin>
		break;
 8001862:	e0c8      	b.n	80019f6 <traffic_light+0x3d6>
	case RED_MODIFY:
		HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, RESET);
 8001864:	2200      	movs	r2, #0
 8001866:	2102      	movs	r1, #2
 8001868:	4840      	ldr	r0, [pc, #256]	; (800196c <traffic_light+0x34c>)
 800186a:	f000 fbf2 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, SET);
 800186e:	2201      	movs	r2, #1
 8001870:	2104      	movs	r1, #4
 8001872:	483e      	ldr	r0, [pc, #248]	; (800196c <traffic_light+0x34c>)
 8001874:	f000 fbed 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_YELLOW_GPIO_Port, LED_3_YELLOW_Pin, SET);
 8001878:	2201      	movs	r2, #1
 800187a:	2108      	movs	r1, #8
 800187c:	483b      	ldr	r0, [pc, #236]	; (800196c <traffic_light+0x34c>)
 800187e:	f000 fbe8 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_4_RED_GPIO_Port, LED_4_RED_Pin, RESET);
 8001882:	2200      	movs	r2, #0
 8001884:	2110      	movs	r1, #16
 8001886:	4839      	ldr	r0, [pc, #228]	; (800196c <traffic_light+0x34c>)
 8001888:	f000 fbe3 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_5_GREEN_GPIO_Port, LED_5_GREEN_Pin, SET);
 800188c:	2201      	movs	r2, #1
 800188e:	2120      	movs	r1, #32
 8001890:	4836      	ldr	r0, [pc, #216]	; (800196c <traffic_light+0x34c>)
 8001892:	f000 fbde 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_6_YELLOW_GPIO_Port, LED_6_YELLOW_Pin, SET);
 8001896:	2201      	movs	r2, #1
 8001898:	2140      	movs	r1, #64	; 0x40
 800189a:	4834      	ldr	r0, [pc, #208]	; (800196c <traffic_light+0x34c>)
 800189c:	f000 fbd9 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_7_RED_GPIO_Port, LED_7_RED_Pin, RESET);
 80018a0:	2200      	movs	r2, #0
 80018a2:	2180      	movs	r1, #128	; 0x80
 80018a4:	4831      	ldr	r0, [pc, #196]	; (800196c <traffic_light+0x34c>)
 80018a6:	f000 fbd4 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_8_GREEN_GPIO_Port, LED_8_GREEN_Pin, SET);
 80018aa:	2201      	movs	r2, #1
 80018ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018b0:	482e      	ldr	r0, [pc, #184]	; (800196c <traffic_light+0x34c>)
 80018b2:	f000 fbce 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_9_YELLOW_GPIO_Port, LED_9_YELLOW_Pin, SET);
 80018b6:	2201      	movs	r2, #1
 80018b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018bc:	482b      	ldr	r0, [pc, #172]	; (800196c <traffic_light+0x34c>)
 80018be:	f000 fbc8 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_10_RED_GPIO_Port, LED_10_RED_Pin, RESET);
 80018c2:	2200      	movs	r2, #0
 80018c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018c8:	4828      	ldr	r0, [pc, #160]	; (800196c <traffic_light+0x34c>)
 80018ca:	f000 fbc2 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_11_GREEN_GPIO_Port, LED_11_GREEN_Pin, SET);
 80018ce:	2201      	movs	r2, #1
 80018d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018d4:	4825      	ldr	r0, [pc, #148]	; (800196c <traffic_light+0x34c>)
 80018d6:	f000 fbbc 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_12_YELLOW_GPIO_Port, LED_12_YELLOW_Pin, SET);
 80018da:	2201      	movs	r2, #1
 80018dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018e0:	4822      	ldr	r0, [pc, #136]	; (800196c <traffic_light+0x34c>)
 80018e2:	f000 fbb6 	bl	8002052 <HAL_GPIO_WritePin>
		break;
 80018e6:	e086      	b.n	80019f6 <traffic_light+0x3d6>
	case YELLOW_MODIFY:
		HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, SET);
 80018e8:	2201      	movs	r2, #1
 80018ea:	2102      	movs	r1, #2
 80018ec:	481f      	ldr	r0, [pc, #124]	; (800196c <traffic_light+0x34c>)
 80018ee:	f000 fbb0 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, SET);
 80018f2:	2201      	movs	r2, #1
 80018f4:	2104      	movs	r1, #4
 80018f6:	481d      	ldr	r0, [pc, #116]	; (800196c <traffic_light+0x34c>)
 80018f8:	f000 fbab 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_YELLOW_GPIO_Port, LED_3_YELLOW_Pin, RESET);
 80018fc:	2200      	movs	r2, #0
 80018fe:	2108      	movs	r1, #8
 8001900:	481a      	ldr	r0, [pc, #104]	; (800196c <traffic_light+0x34c>)
 8001902:	f000 fba6 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_4_RED_GPIO_Port, LED_4_RED_Pin, SET);
 8001906:	2201      	movs	r2, #1
 8001908:	2110      	movs	r1, #16
 800190a:	4818      	ldr	r0, [pc, #96]	; (800196c <traffic_light+0x34c>)
 800190c:	f000 fba1 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_5_GREEN_GPIO_Port, LED_5_GREEN_Pin, SET);
 8001910:	2201      	movs	r2, #1
 8001912:	2120      	movs	r1, #32
 8001914:	4815      	ldr	r0, [pc, #84]	; (800196c <traffic_light+0x34c>)
 8001916:	f000 fb9c 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_6_YELLOW_GPIO_Port, LED_6_YELLOW_Pin, RESET);
 800191a:	2200      	movs	r2, #0
 800191c:	2140      	movs	r1, #64	; 0x40
 800191e:	4813      	ldr	r0, [pc, #76]	; (800196c <traffic_light+0x34c>)
 8001920:	f000 fb97 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_7_RED_GPIO_Port, LED_7_RED_Pin, SET);
 8001924:	2201      	movs	r2, #1
 8001926:	2180      	movs	r1, #128	; 0x80
 8001928:	4810      	ldr	r0, [pc, #64]	; (800196c <traffic_light+0x34c>)
 800192a:	f000 fb92 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_8_GREEN_GPIO_Port, LED_8_GREEN_Pin, SET);
 800192e:	2201      	movs	r2, #1
 8001930:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001934:	480d      	ldr	r0, [pc, #52]	; (800196c <traffic_light+0x34c>)
 8001936:	f000 fb8c 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_9_YELLOW_GPIO_Port, LED_9_YELLOW_Pin, RESET);
 800193a:	2200      	movs	r2, #0
 800193c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001940:	480a      	ldr	r0, [pc, #40]	; (800196c <traffic_light+0x34c>)
 8001942:	f000 fb86 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_10_RED_GPIO_Port, LED_10_RED_Pin, SET);
 8001946:	2201      	movs	r2, #1
 8001948:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800194c:	4807      	ldr	r0, [pc, #28]	; (800196c <traffic_light+0x34c>)
 800194e:	f000 fb80 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_11_GREEN_GPIO_Port, LED_11_GREEN_Pin, SET);
 8001952:	2201      	movs	r2, #1
 8001954:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001958:	4804      	ldr	r0, [pc, #16]	; (800196c <traffic_light+0x34c>)
 800195a:	f000 fb7a 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_12_YELLOW_GPIO_Port, LED_12_YELLOW_Pin, RESET);
 800195e:	2200      	movs	r2, #0
 8001960:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001964:	4801      	ldr	r0, [pc, #4]	; (800196c <traffic_light+0x34c>)
 8001966:	f000 fb74 	bl	8002052 <HAL_GPIO_WritePin>
		break;
 800196a:	e044      	b.n	80019f6 <traffic_light+0x3d6>
 800196c:	40010800 	.word	0x40010800
	case GREEN_MODIFY:
		HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, SET);
 8001970:	2201      	movs	r2, #1
 8001972:	2102      	movs	r1, #2
 8001974:	4822      	ldr	r0, [pc, #136]	; (8001a00 <traffic_light+0x3e0>)
 8001976:	f000 fb6c 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, RESET);
 800197a:	2200      	movs	r2, #0
 800197c:	2104      	movs	r1, #4
 800197e:	4820      	ldr	r0, [pc, #128]	; (8001a00 <traffic_light+0x3e0>)
 8001980:	f000 fb67 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_YELLOW_GPIO_Port, LED_3_YELLOW_Pin, SET);
 8001984:	2201      	movs	r2, #1
 8001986:	2108      	movs	r1, #8
 8001988:	481d      	ldr	r0, [pc, #116]	; (8001a00 <traffic_light+0x3e0>)
 800198a:	f000 fb62 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_4_RED_GPIO_Port, LED_4_RED_Pin, SET);
 800198e:	2201      	movs	r2, #1
 8001990:	2110      	movs	r1, #16
 8001992:	481b      	ldr	r0, [pc, #108]	; (8001a00 <traffic_light+0x3e0>)
 8001994:	f000 fb5d 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_5_GREEN_GPIO_Port, LED_5_GREEN_Pin, RESET);
 8001998:	2200      	movs	r2, #0
 800199a:	2120      	movs	r1, #32
 800199c:	4818      	ldr	r0, [pc, #96]	; (8001a00 <traffic_light+0x3e0>)
 800199e:	f000 fb58 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_6_YELLOW_GPIO_Port, LED_6_YELLOW_Pin, SET);
 80019a2:	2201      	movs	r2, #1
 80019a4:	2140      	movs	r1, #64	; 0x40
 80019a6:	4816      	ldr	r0, [pc, #88]	; (8001a00 <traffic_light+0x3e0>)
 80019a8:	f000 fb53 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_7_RED_GPIO_Port, LED_7_RED_Pin, SET);
 80019ac:	2201      	movs	r2, #1
 80019ae:	2180      	movs	r1, #128	; 0x80
 80019b0:	4813      	ldr	r0, [pc, #76]	; (8001a00 <traffic_light+0x3e0>)
 80019b2:	f000 fb4e 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_8_GREEN_GPIO_Port, LED_8_GREEN_Pin, RESET);
 80019b6:	2200      	movs	r2, #0
 80019b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019bc:	4810      	ldr	r0, [pc, #64]	; (8001a00 <traffic_light+0x3e0>)
 80019be:	f000 fb48 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_9_YELLOW_GPIO_Port, LED_9_YELLOW_Pin, SET);
 80019c2:	2201      	movs	r2, #1
 80019c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019c8:	480d      	ldr	r0, [pc, #52]	; (8001a00 <traffic_light+0x3e0>)
 80019ca:	f000 fb42 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_10_RED_GPIO_Port, LED_10_RED_Pin, SET);
 80019ce:	2201      	movs	r2, #1
 80019d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019d4:	480a      	ldr	r0, [pc, #40]	; (8001a00 <traffic_light+0x3e0>)
 80019d6:	f000 fb3c 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_11_GREEN_GPIO_Port, LED_11_GREEN_Pin, RESET);
 80019da:	2200      	movs	r2, #0
 80019dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019e0:	4807      	ldr	r0, [pc, #28]	; (8001a00 <traffic_light+0x3e0>)
 80019e2:	f000 fb36 	bl	8002052 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_12_YELLOW_GPIO_Port, LED_12_YELLOW_Pin, SET);
 80019e6:	2201      	movs	r2, #1
 80019e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019ec:	4804      	ldr	r0, [pc, #16]	; (8001a00 <traffic_light+0x3e0>)
 80019ee:	f000 fb30 	bl	8002052 <HAL_GPIO_WritePin>
		break;
 80019f2:	e000      	b.n	80019f6 <traffic_light+0x3d6>
	default:
		break;
 80019f4:	bf00      	nop
	}
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40010800 	.word	0x40010800

08001a04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a04:	f7ff fe06 	bl	8001614 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a08:	480b      	ldr	r0, [pc, #44]	; (8001a38 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a0a:	490c      	ldr	r1, [pc, #48]	; (8001a3c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a0c:	4a0c      	ldr	r2, [pc, #48]	; (8001a40 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a10:	e002      	b.n	8001a18 <LoopCopyDataInit>

08001a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a16:	3304      	adds	r3, #4

08001a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a1c:	d3f9      	bcc.n	8001a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1e:	4a09      	ldr	r2, [pc, #36]	; (8001a44 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a20:	4c09      	ldr	r4, [pc, #36]	; (8001a48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a24:	e001      	b.n	8001a2a <LoopFillZerobss>

08001a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a28:	3204      	adds	r2, #4

08001a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a2c:	d3fb      	bcc.n	8001a26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a2e:	f001 faf9 	bl	8003024 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a32:	f7ff faad 	bl	8000f90 <main>
  bx lr
 8001a36:	4770      	bx	lr
  ldr r0, =_sdata
 8001a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a3c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001a40:	080030c0 	.word	0x080030c0
  ldr r2, =_sbss
 8001a44:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001a48:	2000042c 	.word	0x2000042c

08001a4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a4c:	e7fe      	b.n	8001a4c <ADC1_2_IRQHandler>
	...

08001a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <HAL_Init+0x28>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a07      	ldr	r2, [pc, #28]	; (8001a78 <HAL_Init+0x28>)
 8001a5a:	f043 0310 	orr.w	r3, r3, #16
 8001a5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a60:	2003      	movs	r0, #3
 8001a62:	f000 f923 	bl	8001cac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a66:	200f      	movs	r0, #15
 8001a68:	f000 f808 	bl	8001a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a6c:	f7ff fd4a 	bl	8001504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40022000 	.word	0x40022000

08001a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <HAL_InitTick+0x54>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <HAL_InitTick+0x58>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 f93b 	bl	8001d16 <HAL_SYSTICK_Config>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e00e      	b.n	8001ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b0f      	cmp	r3, #15
 8001aae:	d80a      	bhi.n	8001ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab8:	f000 f903 	bl	8001cc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001abc:	4a06      	ldr	r2, [pc, #24]	; (8001ad8 <HAL_InitTick+0x5c>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	e000      	b.n	8001ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	2000007c 	.word	0x2000007c
 8001ad4:	20000084 	.word	0x20000084
 8001ad8:	20000080 	.word	0x20000080

08001adc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ae0:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <HAL_IncTick+0x1c>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b05      	ldr	r3, [pc, #20]	; (8001afc <HAL_IncTick+0x20>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4413      	add	r3, r2
 8001aec:	4a03      	ldr	r2, [pc, #12]	; (8001afc <HAL_IncTick+0x20>)
 8001aee:	6013      	str	r3, [r2, #0]
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr
 8001af8:	20000084 	.word	0x20000084
 8001afc:	20000428 	.word	0x20000428

08001b00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return uwTick;
 8001b04:	4b02      	ldr	r3, [pc, #8]	; (8001b10 <HAL_GetTick+0x10>)
 8001b06:	681b      	ldr	r3, [r3, #0]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr
 8001b10:	20000428 	.word	0x20000428

08001b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b24:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <__NVIC_SetPriorityGrouping+0x44>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b2a:	68ba      	ldr	r2, [r7, #8]
 8001b2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b30:	4013      	ands	r3, r2
 8001b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b46:	4a04      	ldr	r2, [pc, #16]	; (8001b58 <__NVIC_SetPriorityGrouping+0x44>)
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	60d3      	str	r3, [r2, #12]
}
 8001b4c:	bf00      	nop
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b60:	4b04      	ldr	r3, [pc, #16]	; (8001b74 <__NVIC_GetPriorityGrouping+0x18>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	0a1b      	lsrs	r3, r3, #8
 8001b66:	f003 0307 	and.w	r3, r3, #7
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	db0b      	blt.n	8001ba2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	f003 021f 	and.w	r2, r3, #31
 8001b90:	4906      	ldr	r1, [pc, #24]	; (8001bac <__NVIC_EnableIRQ+0x34>)
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	095b      	lsrs	r3, r3, #5
 8001b98:	2001      	movs	r0, #1
 8001b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr
 8001bac:	e000e100 	.word	0xe000e100

08001bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	6039      	str	r1, [r7, #0]
 8001bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	db0a      	blt.n	8001bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	490c      	ldr	r1, [pc, #48]	; (8001bfc <__NVIC_SetPriority+0x4c>)
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	0112      	lsls	r2, r2, #4
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	440b      	add	r3, r1
 8001bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bd8:	e00a      	b.n	8001bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	4908      	ldr	r1, [pc, #32]	; (8001c00 <__NVIC_SetPriority+0x50>)
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	3b04      	subs	r3, #4
 8001be8:	0112      	lsls	r2, r2, #4
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	440b      	add	r3, r1
 8001bee:	761a      	strb	r2, [r3, #24]
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	e000e100 	.word	0xe000e100
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b089      	sub	sp, #36	; 0x24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	f1c3 0307 	rsb	r3, r3, #7
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	bf28      	it	cs
 8001c22:	2304      	movcs	r3, #4
 8001c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	2b06      	cmp	r3, #6
 8001c2c:	d902      	bls.n	8001c34 <NVIC_EncodePriority+0x30>
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3b03      	subs	r3, #3
 8001c32:	e000      	b.n	8001c36 <NVIC_EncodePriority+0x32>
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c38:	f04f 32ff 	mov.w	r2, #4294967295
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43da      	mvns	r2, r3
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	401a      	ands	r2, r3
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	fa01 f303 	lsl.w	r3, r1, r3
 8001c56:	43d9      	mvns	r1, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c5c:	4313      	orrs	r3, r2
         );
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3724      	adds	r7, #36	; 0x24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr

08001c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c78:	d301      	bcc.n	8001c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e00f      	b.n	8001c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <SysTick_Config+0x40>)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c86:	210f      	movs	r1, #15
 8001c88:	f04f 30ff 	mov.w	r0, #4294967295
 8001c8c:	f7ff ff90 	bl	8001bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c90:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <SysTick_Config+0x40>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c96:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <SysTick_Config+0x40>)
 8001c98:	2207      	movs	r2, #7
 8001c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	e000e010 	.word	0xe000e010

08001cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7ff ff2d 	bl	8001b14 <__NVIC_SetPriorityGrouping>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b086      	sub	sp, #24
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	4603      	mov	r3, r0
 8001cca:	60b9      	str	r1, [r7, #8]
 8001ccc:	607a      	str	r2, [r7, #4]
 8001cce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd4:	f7ff ff42 	bl	8001b5c <__NVIC_GetPriorityGrouping>
 8001cd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	68b9      	ldr	r1, [r7, #8]
 8001cde:	6978      	ldr	r0, [r7, #20]
 8001ce0:	f7ff ff90 	bl	8001c04 <NVIC_EncodePriority>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cea:	4611      	mov	r1, r2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ff5f 	bl	8001bb0 <__NVIC_SetPriority>
}
 8001cf2:	bf00      	nop
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	4603      	mov	r3, r0
 8001d02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff35 	bl	8001b78 <__NVIC_EnableIRQ>
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff ffa2 	bl	8001c68 <SysTick_Config>
 8001d24:	4603      	mov	r3, r0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b08b      	sub	sp, #44	; 0x2c
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d42:	e148      	b.n	8001fd6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d44:	2201      	movs	r2, #1
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	69fa      	ldr	r2, [r7, #28]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	f040 8137 	bne.w	8001fd0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	4aa3      	ldr	r2, [pc, #652]	; (8001ff4 <HAL_GPIO_Init+0x2c4>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d05e      	beq.n	8001e2a <HAL_GPIO_Init+0xfa>
 8001d6c:	4aa1      	ldr	r2, [pc, #644]	; (8001ff4 <HAL_GPIO_Init+0x2c4>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d875      	bhi.n	8001e5e <HAL_GPIO_Init+0x12e>
 8001d72:	4aa1      	ldr	r2, [pc, #644]	; (8001ff8 <HAL_GPIO_Init+0x2c8>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d058      	beq.n	8001e2a <HAL_GPIO_Init+0xfa>
 8001d78:	4a9f      	ldr	r2, [pc, #636]	; (8001ff8 <HAL_GPIO_Init+0x2c8>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d86f      	bhi.n	8001e5e <HAL_GPIO_Init+0x12e>
 8001d7e:	4a9f      	ldr	r2, [pc, #636]	; (8001ffc <HAL_GPIO_Init+0x2cc>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d052      	beq.n	8001e2a <HAL_GPIO_Init+0xfa>
 8001d84:	4a9d      	ldr	r2, [pc, #628]	; (8001ffc <HAL_GPIO_Init+0x2cc>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d869      	bhi.n	8001e5e <HAL_GPIO_Init+0x12e>
 8001d8a:	4a9d      	ldr	r2, [pc, #628]	; (8002000 <HAL_GPIO_Init+0x2d0>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d04c      	beq.n	8001e2a <HAL_GPIO_Init+0xfa>
 8001d90:	4a9b      	ldr	r2, [pc, #620]	; (8002000 <HAL_GPIO_Init+0x2d0>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d863      	bhi.n	8001e5e <HAL_GPIO_Init+0x12e>
 8001d96:	4a9b      	ldr	r2, [pc, #620]	; (8002004 <HAL_GPIO_Init+0x2d4>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d046      	beq.n	8001e2a <HAL_GPIO_Init+0xfa>
 8001d9c:	4a99      	ldr	r2, [pc, #612]	; (8002004 <HAL_GPIO_Init+0x2d4>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d85d      	bhi.n	8001e5e <HAL_GPIO_Init+0x12e>
 8001da2:	2b12      	cmp	r3, #18
 8001da4:	d82a      	bhi.n	8001dfc <HAL_GPIO_Init+0xcc>
 8001da6:	2b12      	cmp	r3, #18
 8001da8:	d859      	bhi.n	8001e5e <HAL_GPIO_Init+0x12e>
 8001daa:	a201      	add	r2, pc, #4	; (adr r2, 8001db0 <HAL_GPIO_Init+0x80>)
 8001dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db0:	08001e2b 	.word	0x08001e2b
 8001db4:	08001e05 	.word	0x08001e05
 8001db8:	08001e17 	.word	0x08001e17
 8001dbc:	08001e59 	.word	0x08001e59
 8001dc0:	08001e5f 	.word	0x08001e5f
 8001dc4:	08001e5f 	.word	0x08001e5f
 8001dc8:	08001e5f 	.word	0x08001e5f
 8001dcc:	08001e5f 	.word	0x08001e5f
 8001dd0:	08001e5f 	.word	0x08001e5f
 8001dd4:	08001e5f 	.word	0x08001e5f
 8001dd8:	08001e5f 	.word	0x08001e5f
 8001ddc:	08001e5f 	.word	0x08001e5f
 8001de0:	08001e5f 	.word	0x08001e5f
 8001de4:	08001e5f 	.word	0x08001e5f
 8001de8:	08001e5f 	.word	0x08001e5f
 8001dec:	08001e5f 	.word	0x08001e5f
 8001df0:	08001e5f 	.word	0x08001e5f
 8001df4:	08001e0d 	.word	0x08001e0d
 8001df8:	08001e21 	.word	0x08001e21
 8001dfc:	4a82      	ldr	r2, [pc, #520]	; (8002008 <HAL_GPIO_Init+0x2d8>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d013      	beq.n	8001e2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e02:	e02c      	b.n	8001e5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	623b      	str	r3, [r7, #32]
          break;
 8001e0a:	e029      	b.n	8001e60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	3304      	adds	r3, #4
 8001e12:	623b      	str	r3, [r7, #32]
          break;
 8001e14:	e024      	b.n	8001e60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	3308      	adds	r3, #8
 8001e1c:	623b      	str	r3, [r7, #32]
          break;
 8001e1e:	e01f      	b.n	8001e60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	330c      	adds	r3, #12
 8001e26:	623b      	str	r3, [r7, #32]
          break;
 8001e28:	e01a      	b.n	8001e60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d102      	bne.n	8001e38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e32:	2304      	movs	r3, #4
 8001e34:	623b      	str	r3, [r7, #32]
          break;
 8001e36:	e013      	b.n	8001e60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d105      	bne.n	8001e4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e40:	2308      	movs	r3, #8
 8001e42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69fa      	ldr	r2, [r7, #28]
 8001e48:	611a      	str	r2, [r3, #16]
          break;
 8001e4a:	e009      	b.n	8001e60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e4c:	2308      	movs	r3, #8
 8001e4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	69fa      	ldr	r2, [r7, #28]
 8001e54:	615a      	str	r2, [r3, #20]
          break;
 8001e56:	e003      	b.n	8001e60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	623b      	str	r3, [r7, #32]
          break;
 8001e5c:	e000      	b.n	8001e60 <HAL_GPIO_Init+0x130>
          break;
 8001e5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	2bff      	cmp	r3, #255	; 0xff
 8001e64:	d801      	bhi.n	8001e6a <HAL_GPIO_Init+0x13a>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	e001      	b.n	8001e6e <HAL_GPIO_Init+0x13e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	2bff      	cmp	r3, #255	; 0xff
 8001e74:	d802      	bhi.n	8001e7c <HAL_GPIO_Init+0x14c>
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	e002      	b.n	8001e82 <HAL_GPIO_Init+0x152>
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	3b08      	subs	r3, #8
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	210f      	movs	r1, #15
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	401a      	ands	r2, r3
 8001e94:	6a39      	ldr	r1, [r7, #32]
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 8090 	beq.w	8001fd0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001eb0:	4b56      	ldr	r3, [pc, #344]	; (800200c <HAL_GPIO_Init+0x2dc>)
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	4a55      	ldr	r2, [pc, #340]	; (800200c <HAL_GPIO_Init+0x2dc>)
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	6193      	str	r3, [r2, #24]
 8001ebc:	4b53      	ldr	r3, [pc, #332]	; (800200c <HAL_GPIO_Init+0x2dc>)
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	60bb      	str	r3, [r7, #8]
 8001ec6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ec8:	4a51      	ldr	r2, [pc, #324]	; (8002010 <HAL_GPIO_Init+0x2e0>)
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	089b      	lsrs	r3, r3, #2
 8001ece:	3302      	adds	r3, #2
 8001ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	220f      	movs	r2, #15
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a49      	ldr	r2, [pc, #292]	; (8002014 <HAL_GPIO_Init+0x2e4>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d00d      	beq.n	8001f10 <HAL_GPIO_Init+0x1e0>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a48      	ldr	r2, [pc, #288]	; (8002018 <HAL_GPIO_Init+0x2e8>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d007      	beq.n	8001f0c <HAL_GPIO_Init+0x1dc>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a47      	ldr	r2, [pc, #284]	; (800201c <HAL_GPIO_Init+0x2ec>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d101      	bne.n	8001f08 <HAL_GPIO_Init+0x1d8>
 8001f04:	2302      	movs	r3, #2
 8001f06:	e004      	b.n	8001f12 <HAL_GPIO_Init+0x1e2>
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e002      	b.n	8001f12 <HAL_GPIO_Init+0x1e2>
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e000      	b.n	8001f12 <HAL_GPIO_Init+0x1e2>
 8001f10:	2300      	movs	r3, #0
 8001f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f14:	f002 0203 	and.w	r2, r2, #3
 8001f18:	0092      	lsls	r2, r2, #2
 8001f1a:	4093      	lsls	r3, r2
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f22:	493b      	ldr	r1, [pc, #236]	; (8002010 <HAL_GPIO_Init+0x2e0>)
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	089b      	lsrs	r3, r3, #2
 8001f28:	3302      	adds	r3, #2
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d006      	beq.n	8001f4a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f3c:	4b38      	ldr	r3, [pc, #224]	; (8002020 <HAL_GPIO_Init+0x2f0>)
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	4937      	ldr	r1, [pc, #220]	; (8002020 <HAL_GPIO_Init+0x2f0>)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	608b      	str	r3, [r1, #8]
 8001f48:	e006      	b.n	8001f58 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f4a:	4b35      	ldr	r3, [pc, #212]	; (8002020 <HAL_GPIO_Init+0x2f0>)
 8001f4c:	689a      	ldr	r2, [r3, #8]
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	4933      	ldr	r1, [pc, #204]	; (8002020 <HAL_GPIO_Init+0x2f0>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d006      	beq.n	8001f72 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f64:	4b2e      	ldr	r3, [pc, #184]	; (8002020 <HAL_GPIO_Init+0x2f0>)
 8001f66:	68da      	ldr	r2, [r3, #12]
 8001f68:	492d      	ldr	r1, [pc, #180]	; (8002020 <HAL_GPIO_Init+0x2f0>)
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	60cb      	str	r3, [r1, #12]
 8001f70:	e006      	b.n	8001f80 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f72:	4b2b      	ldr	r3, [pc, #172]	; (8002020 <HAL_GPIO_Init+0x2f0>)
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	4929      	ldr	r1, [pc, #164]	; (8002020 <HAL_GPIO_Init+0x2f0>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d006      	beq.n	8001f9a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f8c:	4b24      	ldr	r3, [pc, #144]	; (8002020 <HAL_GPIO_Init+0x2f0>)
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	4923      	ldr	r1, [pc, #140]	; (8002020 <HAL_GPIO_Init+0x2f0>)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	604b      	str	r3, [r1, #4]
 8001f98:	e006      	b.n	8001fa8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f9a:	4b21      	ldr	r3, [pc, #132]	; (8002020 <HAL_GPIO_Init+0x2f0>)
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	491f      	ldr	r1, [pc, #124]	; (8002020 <HAL_GPIO_Init+0x2f0>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d006      	beq.n	8001fc2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fb4:	4b1a      	ldr	r3, [pc, #104]	; (8002020 <HAL_GPIO_Init+0x2f0>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4919      	ldr	r1, [pc, #100]	; (8002020 <HAL_GPIO_Init+0x2f0>)
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	600b      	str	r3, [r1, #0]
 8001fc0:	e006      	b.n	8001fd0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fc2:	4b17      	ldr	r3, [pc, #92]	; (8002020 <HAL_GPIO_Init+0x2f0>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	4915      	ldr	r1, [pc, #84]	; (8002020 <HAL_GPIO_Init+0x2f0>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f47f aeaf 	bne.w	8001d44 <HAL_GPIO_Init+0x14>
  }
}
 8001fe6:	bf00      	nop
 8001fe8:	bf00      	nop
 8001fea:	372c      	adds	r7, #44	; 0x2c
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	10320000 	.word	0x10320000
 8001ff8:	10310000 	.word	0x10310000
 8001ffc:	10220000 	.word	0x10220000
 8002000:	10210000 	.word	0x10210000
 8002004:	10120000 	.word	0x10120000
 8002008:	10110000 	.word	0x10110000
 800200c:	40021000 	.word	0x40021000
 8002010:	40010000 	.word	0x40010000
 8002014:	40010800 	.word	0x40010800
 8002018:	40010c00 	.word	0x40010c00
 800201c:	40011000 	.word	0x40011000
 8002020:	40010400 	.word	0x40010400

08002024 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	887b      	ldrh	r3, [r7, #2]
 8002036:	4013      	ands	r3, r2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d002      	beq.n	8002042 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800203c:	2301      	movs	r3, #1
 800203e:	73fb      	strb	r3, [r7, #15]
 8002040:	e001      	b.n	8002046 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002042:	2300      	movs	r3, #0
 8002044:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002046:	7bfb      	ldrb	r3, [r7, #15]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr

08002052 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
 800205a:	460b      	mov	r3, r1
 800205c:	807b      	strh	r3, [r7, #2]
 800205e:	4613      	mov	r3, r2
 8002060:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002062:	787b      	ldrb	r3, [r7, #1]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002068:	887a      	ldrh	r2, [r7, #2]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800206e:	e003      	b.n	8002078 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002070:	887b      	ldrh	r3, [r7, #2]
 8002072:	041a      	lsls	r2, r3, #16
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	611a      	str	r2, [r3, #16]
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	bc80      	pop	{r7}
 8002080:	4770      	bx	lr

08002082 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002082:	b480      	push	{r7}
 8002084:	b085      	sub	sp, #20
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
 800208a:	460b      	mov	r3, r1
 800208c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002094:	887a      	ldrh	r2, [r7, #2]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4013      	ands	r3, r2
 800209a:	041a      	lsls	r2, r3, #16
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	43d9      	mvns	r1, r3
 80020a0:	887b      	ldrh	r3, [r7, #2]
 80020a2:	400b      	ands	r3, r1
 80020a4:	431a      	orrs	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	611a      	str	r2, [r3, #16]
}
 80020aa:	bf00      	nop
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr

080020b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e26c      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 8087 	beq.w	80021e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020d4:	4b92      	ldr	r3, [pc, #584]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 030c 	and.w	r3, r3, #12
 80020dc:	2b04      	cmp	r3, #4
 80020de:	d00c      	beq.n	80020fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020e0:	4b8f      	ldr	r3, [pc, #572]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 030c 	and.w	r3, r3, #12
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d112      	bne.n	8002112 <HAL_RCC_OscConfig+0x5e>
 80020ec:	4b8c      	ldr	r3, [pc, #560]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f8:	d10b      	bne.n	8002112 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020fa:	4b89      	ldr	r3, [pc, #548]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d06c      	beq.n	80021e0 <HAL_RCC_OscConfig+0x12c>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d168      	bne.n	80021e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e246      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800211a:	d106      	bne.n	800212a <HAL_RCC_OscConfig+0x76>
 800211c:	4b80      	ldr	r3, [pc, #512]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a7f      	ldr	r2, [pc, #508]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002122:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002126:	6013      	str	r3, [r2, #0]
 8002128:	e02e      	b.n	8002188 <HAL_RCC_OscConfig+0xd4>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10c      	bne.n	800214c <HAL_RCC_OscConfig+0x98>
 8002132:	4b7b      	ldr	r3, [pc, #492]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a7a      	ldr	r2, [pc, #488]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002138:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	4b78      	ldr	r3, [pc, #480]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a77      	ldr	r2, [pc, #476]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002144:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	e01d      	b.n	8002188 <HAL_RCC_OscConfig+0xd4>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002154:	d10c      	bne.n	8002170 <HAL_RCC_OscConfig+0xbc>
 8002156:	4b72      	ldr	r3, [pc, #456]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a71      	ldr	r2, [pc, #452]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 800215c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	4b6f      	ldr	r3, [pc, #444]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a6e      	ldr	r2, [pc, #440]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	e00b      	b.n	8002188 <HAL_RCC_OscConfig+0xd4>
 8002170:	4b6b      	ldr	r3, [pc, #428]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a6a      	ldr	r2, [pc, #424]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800217a:	6013      	str	r3, [r2, #0]
 800217c:	4b68      	ldr	r3, [pc, #416]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a67      	ldr	r2, [pc, #412]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002186:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d013      	beq.n	80021b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002190:	f7ff fcb6 	bl	8001b00 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002198:	f7ff fcb2 	bl	8001b00 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b64      	cmp	r3, #100	; 0x64
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e1fa      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021aa:	4b5d      	ldr	r3, [pc, #372]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0f0      	beq.n	8002198 <HAL_RCC_OscConfig+0xe4>
 80021b6:	e014      	b.n	80021e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b8:	f7ff fca2 	bl	8001b00 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c0:	f7ff fc9e 	bl	8001b00 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b64      	cmp	r3, #100	; 0x64
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e1e6      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021d2:	4b53      	ldr	r3, [pc, #332]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f0      	bne.n	80021c0 <HAL_RCC_OscConfig+0x10c>
 80021de:	e000      	b.n	80021e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d063      	beq.n	80022b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021ee:	4b4c      	ldr	r3, [pc, #304]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00b      	beq.n	8002212 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021fa:	4b49      	ldr	r3, [pc, #292]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b08      	cmp	r3, #8
 8002204:	d11c      	bne.n	8002240 <HAL_RCC_OscConfig+0x18c>
 8002206:	4b46      	ldr	r3, [pc, #280]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d116      	bne.n	8002240 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002212:	4b43      	ldr	r3, [pc, #268]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d005      	beq.n	800222a <HAL_RCC_OscConfig+0x176>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d001      	beq.n	800222a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e1ba      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800222a:	4b3d      	ldr	r3, [pc, #244]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	4939      	ldr	r1, [pc, #228]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 800223a:	4313      	orrs	r3, r2
 800223c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800223e:	e03a      	b.n	80022b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d020      	beq.n	800228a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002248:	4b36      	ldr	r3, [pc, #216]	; (8002324 <HAL_RCC_OscConfig+0x270>)
 800224a:	2201      	movs	r2, #1
 800224c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224e:	f7ff fc57 	bl	8001b00 <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002256:	f7ff fc53 	bl	8001b00 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e19b      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002268:	4b2d      	ldr	r3, [pc, #180]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0f0      	beq.n	8002256 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002274:	4b2a      	ldr	r3, [pc, #168]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	4927      	ldr	r1, [pc, #156]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002284:	4313      	orrs	r3, r2
 8002286:	600b      	str	r3, [r1, #0]
 8002288:	e015      	b.n	80022b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800228a:	4b26      	ldr	r3, [pc, #152]	; (8002324 <HAL_RCC_OscConfig+0x270>)
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002290:	f7ff fc36 	bl	8001b00 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002298:	f7ff fc32 	bl	8001b00 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e17a      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022aa:	4b1d      	ldr	r3, [pc, #116]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f0      	bne.n	8002298 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d03a      	beq.n	8002338 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d019      	beq.n	80022fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ca:	4b17      	ldr	r3, [pc, #92]	; (8002328 <HAL_RCC_OscConfig+0x274>)
 80022cc:	2201      	movs	r2, #1
 80022ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d0:	f7ff fc16 	bl	8001b00 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d8:	f7ff fc12 	bl	8001b00 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e15a      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ea:	4b0d      	ldr	r3, [pc, #52]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0f0      	beq.n	80022d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022f6:	2001      	movs	r0, #1
 80022f8:	f000 fa9a 	bl	8002830 <RCC_Delay>
 80022fc:	e01c      	b.n	8002338 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022fe:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <HAL_RCC_OscConfig+0x274>)
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002304:	f7ff fbfc 	bl	8001b00 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800230a:	e00f      	b.n	800232c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800230c:	f7ff fbf8 	bl	8001b00 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d908      	bls.n	800232c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e140      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
 800231e:	bf00      	nop
 8002320:	40021000 	.word	0x40021000
 8002324:	42420000 	.word	0x42420000
 8002328:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800232c:	4b9e      	ldr	r3, [pc, #632]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1e9      	bne.n	800230c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 80a6 	beq.w	8002492 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002346:	2300      	movs	r3, #0
 8002348:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800234a:	4b97      	ldr	r3, [pc, #604]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10d      	bne.n	8002372 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002356:	4b94      	ldr	r3, [pc, #592]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	4a93      	ldr	r2, [pc, #588]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 800235c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002360:	61d3      	str	r3, [r2, #28]
 8002362:	4b91      	ldr	r3, [pc, #580]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800236e:	2301      	movs	r3, #1
 8002370:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002372:	4b8e      	ldr	r3, [pc, #568]	; (80025ac <HAL_RCC_OscConfig+0x4f8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237a:	2b00      	cmp	r3, #0
 800237c:	d118      	bne.n	80023b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800237e:	4b8b      	ldr	r3, [pc, #556]	; (80025ac <HAL_RCC_OscConfig+0x4f8>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a8a      	ldr	r2, [pc, #552]	; (80025ac <HAL_RCC_OscConfig+0x4f8>)
 8002384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002388:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800238a:	f7ff fbb9 	bl	8001b00 <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002392:	f7ff fbb5 	bl	8001b00 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b64      	cmp	r3, #100	; 0x64
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e0fd      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a4:	4b81      	ldr	r3, [pc, #516]	; (80025ac <HAL_RCC_OscConfig+0x4f8>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0f0      	beq.n	8002392 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d106      	bne.n	80023c6 <HAL_RCC_OscConfig+0x312>
 80023b8:	4b7b      	ldr	r3, [pc, #492]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	4a7a      	ldr	r2, [pc, #488]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	6213      	str	r3, [r2, #32]
 80023c4:	e02d      	b.n	8002422 <HAL_RCC_OscConfig+0x36e>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10c      	bne.n	80023e8 <HAL_RCC_OscConfig+0x334>
 80023ce:	4b76      	ldr	r3, [pc, #472]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	4a75      	ldr	r2, [pc, #468]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 80023d4:	f023 0301 	bic.w	r3, r3, #1
 80023d8:	6213      	str	r3, [r2, #32]
 80023da:	4b73      	ldr	r3, [pc, #460]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	4a72      	ldr	r2, [pc, #456]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 80023e0:	f023 0304 	bic.w	r3, r3, #4
 80023e4:	6213      	str	r3, [r2, #32]
 80023e6:	e01c      	b.n	8002422 <HAL_RCC_OscConfig+0x36e>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	2b05      	cmp	r3, #5
 80023ee:	d10c      	bne.n	800240a <HAL_RCC_OscConfig+0x356>
 80023f0:	4b6d      	ldr	r3, [pc, #436]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	4a6c      	ldr	r2, [pc, #432]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 80023f6:	f043 0304 	orr.w	r3, r3, #4
 80023fa:	6213      	str	r3, [r2, #32]
 80023fc:	4b6a      	ldr	r3, [pc, #424]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	4a69      	ldr	r2, [pc, #420]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	6213      	str	r3, [r2, #32]
 8002408:	e00b      	b.n	8002422 <HAL_RCC_OscConfig+0x36e>
 800240a:	4b67      	ldr	r3, [pc, #412]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	4a66      	ldr	r2, [pc, #408]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 8002410:	f023 0301 	bic.w	r3, r3, #1
 8002414:	6213      	str	r3, [r2, #32]
 8002416:	4b64      	ldr	r3, [pc, #400]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	4a63      	ldr	r2, [pc, #396]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 800241c:	f023 0304 	bic.w	r3, r3, #4
 8002420:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d015      	beq.n	8002456 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800242a:	f7ff fb69 	bl	8001b00 <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002430:	e00a      	b.n	8002448 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002432:	f7ff fb65 	bl	8001b00 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002440:	4293      	cmp	r3, r2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e0ab      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002448:	4b57      	ldr	r3, [pc, #348]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0ee      	beq.n	8002432 <HAL_RCC_OscConfig+0x37e>
 8002454:	e014      	b.n	8002480 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002456:	f7ff fb53 	bl	8001b00 <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800245c:	e00a      	b.n	8002474 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800245e:	f7ff fb4f 	bl	8001b00 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	f241 3288 	movw	r2, #5000	; 0x1388
 800246c:	4293      	cmp	r3, r2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e095      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002474:	4b4c      	ldr	r3, [pc, #304]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1ee      	bne.n	800245e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002480:	7dfb      	ldrb	r3, [r7, #23]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d105      	bne.n	8002492 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002486:	4b48      	ldr	r3, [pc, #288]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	4a47      	ldr	r2, [pc, #284]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 800248c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002490:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 8081 	beq.w	800259e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800249c:	4b42      	ldr	r3, [pc, #264]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 030c 	and.w	r3, r3, #12
 80024a4:	2b08      	cmp	r3, #8
 80024a6:	d061      	beq.n	800256c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69db      	ldr	r3, [r3, #28]
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d146      	bne.n	800253e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b0:	4b3f      	ldr	r3, [pc, #252]	; (80025b0 <HAL_RCC_OscConfig+0x4fc>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b6:	f7ff fb23 	bl	8001b00 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024be:	f7ff fb1f 	bl	8001b00 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e067      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d0:	4b35      	ldr	r3, [pc, #212]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1f0      	bne.n	80024be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e4:	d108      	bne.n	80024f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024e6:	4b30      	ldr	r3, [pc, #192]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	492d      	ldr	r1, [pc, #180]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024f8:	4b2b      	ldr	r3, [pc, #172]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a19      	ldr	r1, [r3, #32]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	430b      	orrs	r3, r1
 800250a:	4927      	ldr	r1, [pc, #156]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 800250c:	4313      	orrs	r3, r2
 800250e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002510:	4b27      	ldr	r3, [pc, #156]	; (80025b0 <HAL_RCC_OscConfig+0x4fc>)
 8002512:	2201      	movs	r2, #1
 8002514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002516:	f7ff faf3 	bl	8001b00 <HAL_GetTick>
 800251a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800251c:	e008      	b.n	8002530 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800251e:	f7ff faef 	bl	8001b00 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e037      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002530:	4b1d      	ldr	r3, [pc, #116]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0f0      	beq.n	800251e <HAL_RCC_OscConfig+0x46a>
 800253c:	e02f      	b.n	800259e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253e:	4b1c      	ldr	r3, [pc, #112]	; (80025b0 <HAL_RCC_OscConfig+0x4fc>)
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002544:	f7ff fadc 	bl	8001b00 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800254c:	f7ff fad8 	bl	8001b00 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e020      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800255e:	4b12      	ldr	r3, [pc, #72]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_OscConfig+0x498>
 800256a:	e018      	b.n	800259e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d101      	bne.n	8002578 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e013      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002578:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	429a      	cmp	r2, r3
 800258a:	d106      	bne.n	800259a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002596:	429a      	cmp	r2, r3
 8002598:	d001      	beq.n	800259e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40021000 	.word	0x40021000
 80025ac:	40007000 	.word	0x40007000
 80025b0:	42420060 	.word	0x42420060

080025b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e0d0      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025c8:	4b6a      	ldr	r3, [pc, #424]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d910      	bls.n	80025f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d6:	4b67      	ldr	r3, [pc, #412]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f023 0207 	bic.w	r2, r3, #7
 80025de:	4965      	ldr	r1, [pc, #404]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e6:	4b63      	ldr	r3, [pc, #396]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d001      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e0b8      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d020      	beq.n	8002646 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	d005      	beq.n	800261c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002610:	4b59      	ldr	r3, [pc, #356]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	4a58      	ldr	r2, [pc, #352]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002616:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800261a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0308 	and.w	r3, r3, #8
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002628:	4b53      	ldr	r3, [pc, #332]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	4a52      	ldr	r2, [pc, #328]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 800262e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002632:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002634:	4b50      	ldr	r3, [pc, #320]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	494d      	ldr	r1, [pc, #308]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002642:	4313      	orrs	r3, r2
 8002644:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d040      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d107      	bne.n	800266a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265a:	4b47      	ldr	r3, [pc, #284]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d115      	bne.n	8002692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e07f      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b02      	cmp	r3, #2
 8002670:	d107      	bne.n	8002682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002672:	4b41      	ldr	r3, [pc, #260]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d109      	bne.n	8002692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e073      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002682:	4b3d      	ldr	r3, [pc, #244]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e06b      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002692:	4b39      	ldr	r3, [pc, #228]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f023 0203 	bic.w	r2, r3, #3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	4936      	ldr	r1, [pc, #216]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026a4:	f7ff fa2c 	bl	8001b00 <HAL_GetTick>
 80026a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026aa:	e00a      	b.n	80026c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ac:	f7ff fa28 	bl	8001b00 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e053      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c2:	4b2d      	ldr	r3, [pc, #180]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f003 020c 	and.w	r2, r3, #12
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d1eb      	bne.n	80026ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026d4:	4b27      	ldr	r3, [pc, #156]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d210      	bcs.n	8002704 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e2:	4b24      	ldr	r3, [pc, #144]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 0207 	bic.w	r2, r3, #7
 80026ea:	4922      	ldr	r1, [pc, #136]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f2:	4b20      	ldr	r3, [pc, #128]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d001      	beq.n	8002704 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e032      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	d008      	beq.n	8002722 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002710:	4b19      	ldr	r3, [pc, #100]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	4916      	ldr	r1, [pc, #88]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	4313      	orrs	r3, r2
 8002720:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0308 	and.w	r3, r3, #8
 800272a:	2b00      	cmp	r3, #0
 800272c:	d009      	beq.n	8002742 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800272e:	4b12      	ldr	r3, [pc, #72]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	490e      	ldr	r1, [pc, #56]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	4313      	orrs	r3, r2
 8002740:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002742:	f000 f821 	bl	8002788 <HAL_RCC_GetSysClockFreq>
 8002746:	4602      	mov	r2, r0
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	091b      	lsrs	r3, r3, #4
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	490a      	ldr	r1, [pc, #40]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 8002754:	5ccb      	ldrb	r3, [r1, r3]
 8002756:	fa22 f303 	lsr.w	r3, r2, r3
 800275a:	4a09      	ldr	r2, [pc, #36]	; (8002780 <HAL_RCC_ClockConfig+0x1cc>)
 800275c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800275e:	4b09      	ldr	r3, [pc, #36]	; (8002784 <HAL_RCC_ClockConfig+0x1d0>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff f98a 	bl	8001a7c <HAL_InitTick>

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40022000 	.word	0x40022000
 8002778:	40021000 	.word	0x40021000
 800277c:	08003094 	.word	0x08003094
 8002780:	2000007c 	.word	0x2000007c
 8002784:	20000080 	.word	0x20000080

08002788 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002788:	b480      	push	{r7}
 800278a:	b087      	sub	sp, #28
 800278c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800278e:	2300      	movs	r3, #0
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	2300      	movs	r3, #0
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	2300      	movs	r3, #0
 8002798:	617b      	str	r3, [r7, #20]
 800279a:	2300      	movs	r3, #0
 800279c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800279e:	2300      	movs	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027a2:	4b1e      	ldr	r3, [pc, #120]	; (800281c <HAL_RCC_GetSysClockFreq+0x94>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f003 030c 	and.w	r3, r3, #12
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d002      	beq.n	80027b8 <HAL_RCC_GetSysClockFreq+0x30>
 80027b2:	2b08      	cmp	r3, #8
 80027b4:	d003      	beq.n	80027be <HAL_RCC_GetSysClockFreq+0x36>
 80027b6:	e027      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027b8:	4b19      	ldr	r3, [pc, #100]	; (8002820 <HAL_RCC_GetSysClockFreq+0x98>)
 80027ba:	613b      	str	r3, [r7, #16]
      break;
 80027bc:	e027      	b.n	800280e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	0c9b      	lsrs	r3, r3, #18
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	4a17      	ldr	r2, [pc, #92]	; (8002824 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027c8:	5cd3      	ldrb	r3, [r2, r3]
 80027ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d010      	beq.n	80027f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027d6:	4b11      	ldr	r3, [pc, #68]	; (800281c <HAL_RCC_GetSysClockFreq+0x94>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	0c5b      	lsrs	r3, r3, #17
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	4a11      	ldr	r2, [pc, #68]	; (8002828 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027e2:	5cd3      	ldrb	r3, [r2, r3]
 80027e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a0d      	ldr	r2, [pc, #52]	; (8002820 <HAL_RCC_GetSysClockFreq+0x98>)
 80027ea:	fb02 f203 	mul.w	r2, r2, r3
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f4:	617b      	str	r3, [r7, #20]
 80027f6:	e004      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a0c      	ldr	r2, [pc, #48]	; (800282c <HAL_RCC_GetSysClockFreq+0xa4>)
 80027fc:	fb02 f303 	mul.w	r3, r2, r3
 8002800:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	613b      	str	r3, [r7, #16]
      break;
 8002806:	e002      	b.n	800280e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002808:	4b05      	ldr	r3, [pc, #20]	; (8002820 <HAL_RCC_GetSysClockFreq+0x98>)
 800280a:	613b      	str	r3, [r7, #16]
      break;
 800280c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800280e:	693b      	ldr	r3, [r7, #16]
}
 8002810:	4618      	mov	r0, r3
 8002812:	371c      	adds	r7, #28
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	40021000 	.word	0x40021000
 8002820:	007a1200 	.word	0x007a1200
 8002824:	080030a4 	.word	0x080030a4
 8002828:	080030b4 	.word	0x080030b4
 800282c:	003d0900 	.word	0x003d0900

08002830 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002838:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <RCC_Delay+0x34>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a0a      	ldr	r2, [pc, #40]	; (8002868 <RCC_Delay+0x38>)
 800283e:	fba2 2303 	umull	r2, r3, r2, r3
 8002842:	0a5b      	lsrs	r3, r3, #9
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	fb02 f303 	mul.w	r3, r2, r3
 800284a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800284c:	bf00      	nop
  }
  while (Delay --);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	1e5a      	subs	r2, r3, #1
 8002852:	60fa      	str	r2, [r7, #12]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1f9      	bne.n	800284c <RCC_Delay+0x1c>
}
 8002858:	bf00      	nop
 800285a:	bf00      	nop
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr
 8002864:	2000007c 	.word	0x2000007c
 8002868:	10624dd3 	.word	0x10624dd3

0800286c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e041      	b.n	8002902 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d106      	bne.n	8002898 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7fe fe68 	bl	8001568 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2202      	movs	r2, #2
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3304      	adds	r3, #4
 80028a8:	4619      	mov	r1, r3
 80028aa:	4610      	mov	r0, r2
 80028ac:	f000 fa56 	bl	8002d5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
	...

0800290c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b01      	cmp	r3, #1
 800291e:	d001      	beq.n	8002924 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e035      	b.n	8002990 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2202      	movs	r2, #2
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 0201 	orr.w	r2, r2, #1
 800293a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a16      	ldr	r2, [pc, #88]	; (800299c <HAL_TIM_Base_Start_IT+0x90>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d009      	beq.n	800295a <HAL_TIM_Base_Start_IT+0x4e>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800294e:	d004      	beq.n	800295a <HAL_TIM_Base_Start_IT+0x4e>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a12      	ldr	r2, [pc, #72]	; (80029a0 <HAL_TIM_Base_Start_IT+0x94>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d111      	bne.n	800297e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2b06      	cmp	r3, #6
 800296a:	d010      	beq.n	800298e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f042 0201 	orr.w	r2, r2, #1
 800297a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800297c:	e007      	b.n	800298e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f042 0201 	orr.w	r2, r2, #1
 800298c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40012c00 	.word	0x40012c00
 80029a0:	40000400 	.word	0x40000400

080029a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d020      	beq.n	8002a08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d01b      	beq.n	8002a08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f06f 0202 	mvn.w	r2, #2
 80029d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f998 	bl	8002d24 <HAL_TIM_IC_CaptureCallback>
 80029f4:	e005      	b.n	8002a02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f98b 	bl	8002d12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 f99a 	bl	8002d36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d020      	beq.n	8002a54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d01b      	beq.n	8002a54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f06f 0204 	mvn.w	r2, #4
 8002a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2202      	movs	r2, #2
 8002a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f972 	bl	8002d24 <HAL_TIM_IC_CaptureCallback>
 8002a40:	e005      	b.n	8002a4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f965 	bl	8002d12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 f974 	bl	8002d36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d020      	beq.n	8002aa0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f003 0308 	and.w	r3, r3, #8
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d01b      	beq.n	8002aa0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f06f 0208 	mvn.w	r2, #8
 8002a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2204      	movs	r2, #4
 8002a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f94c 	bl	8002d24 <HAL_TIM_IC_CaptureCallback>
 8002a8c:	e005      	b.n	8002a9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f93f 	bl	8002d12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f94e 	bl	8002d36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	f003 0310 	and.w	r3, r3, #16
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d020      	beq.n	8002aec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f003 0310 	and.w	r3, r3, #16
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d01b      	beq.n	8002aec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f06f 0210 	mvn.w	r2, #16
 8002abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2208      	movs	r2, #8
 8002ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f926 	bl	8002d24 <HAL_TIM_IC_CaptureCallback>
 8002ad8:	e005      	b.n	8002ae6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f919 	bl	8002d12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 f928 	bl	8002d36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00c      	beq.n	8002b10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d007      	beq.n	8002b10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f06f 0201 	mvn.w	r2, #1
 8002b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7fe fb78 	bl	8001200 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00c      	beq.n	8002b34 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d007      	beq.n	8002b34 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 fa6f 	bl	8003012 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00c      	beq.n	8002b58 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d007      	beq.n	8002b58 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f8f8 	bl	8002d48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	f003 0320 	and.w	r3, r3, #32
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00c      	beq.n	8002b7c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f003 0320 	and.w	r3, r3, #32
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d007      	beq.n	8002b7c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f06f 0220 	mvn.w	r2, #32
 8002b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 fa42 	bl	8003000 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b7c:	bf00      	nop
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d101      	bne.n	8002ba0 <HAL_TIM_ConfigClockSource+0x1c>
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	e0b4      	b.n	8002d0a <HAL_TIM_ConfigClockSource+0x186>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2202      	movs	r2, #2
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bd8:	d03e      	beq.n	8002c58 <HAL_TIM_ConfigClockSource+0xd4>
 8002bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bde:	f200 8087 	bhi.w	8002cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8002be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002be6:	f000 8086 	beq.w	8002cf6 <HAL_TIM_ConfigClockSource+0x172>
 8002bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bee:	d87f      	bhi.n	8002cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf0:	2b70      	cmp	r3, #112	; 0x70
 8002bf2:	d01a      	beq.n	8002c2a <HAL_TIM_ConfigClockSource+0xa6>
 8002bf4:	2b70      	cmp	r3, #112	; 0x70
 8002bf6:	d87b      	bhi.n	8002cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf8:	2b60      	cmp	r3, #96	; 0x60
 8002bfa:	d050      	beq.n	8002c9e <HAL_TIM_ConfigClockSource+0x11a>
 8002bfc:	2b60      	cmp	r3, #96	; 0x60
 8002bfe:	d877      	bhi.n	8002cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8002c00:	2b50      	cmp	r3, #80	; 0x50
 8002c02:	d03c      	beq.n	8002c7e <HAL_TIM_ConfigClockSource+0xfa>
 8002c04:	2b50      	cmp	r3, #80	; 0x50
 8002c06:	d873      	bhi.n	8002cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8002c08:	2b40      	cmp	r3, #64	; 0x40
 8002c0a:	d058      	beq.n	8002cbe <HAL_TIM_ConfigClockSource+0x13a>
 8002c0c:	2b40      	cmp	r3, #64	; 0x40
 8002c0e:	d86f      	bhi.n	8002cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8002c10:	2b30      	cmp	r3, #48	; 0x30
 8002c12:	d064      	beq.n	8002cde <HAL_TIM_ConfigClockSource+0x15a>
 8002c14:	2b30      	cmp	r3, #48	; 0x30
 8002c16:	d86b      	bhi.n	8002cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8002c18:	2b20      	cmp	r3, #32
 8002c1a:	d060      	beq.n	8002cde <HAL_TIM_ConfigClockSource+0x15a>
 8002c1c:	2b20      	cmp	r3, #32
 8002c1e:	d867      	bhi.n	8002cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d05c      	beq.n	8002cde <HAL_TIM_ConfigClockSource+0x15a>
 8002c24:	2b10      	cmp	r3, #16
 8002c26:	d05a      	beq.n	8002cde <HAL_TIM_ConfigClockSource+0x15a>
 8002c28:	e062      	b.n	8002cf0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6818      	ldr	r0, [r3, #0]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	6899      	ldr	r1, [r3, #8]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f000 f96a 	bl	8002f12 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	609a      	str	r2, [r3, #8]
      break;
 8002c56:	e04f      	b.n	8002cf8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6818      	ldr	r0, [r3, #0]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	6899      	ldr	r1, [r3, #8]
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f000 f953 	bl	8002f12 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c7a:	609a      	str	r2, [r3, #8]
      break;
 8002c7c:	e03c      	b.n	8002cf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6818      	ldr	r0, [r3, #0]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	6859      	ldr	r1, [r3, #4]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	f000 f8ca 	bl	8002e24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2150      	movs	r1, #80	; 0x50
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 f921 	bl	8002ede <TIM_ITRx_SetConfig>
      break;
 8002c9c:	e02c      	b.n	8002cf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6818      	ldr	r0, [r3, #0]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	6859      	ldr	r1, [r3, #4]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	461a      	mov	r2, r3
 8002cac:	f000 f8e8 	bl	8002e80 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2160      	movs	r1, #96	; 0x60
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 f911 	bl	8002ede <TIM_ITRx_SetConfig>
      break;
 8002cbc:	e01c      	b.n	8002cf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6818      	ldr	r0, [r3, #0]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	6859      	ldr	r1, [r3, #4]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	f000 f8aa 	bl	8002e24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2140      	movs	r1, #64	; 0x40
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 f901 	bl	8002ede <TIM_ITRx_SetConfig>
      break;
 8002cdc:	e00c      	b.n	8002cf8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4610      	mov	r0, r2
 8002cea:	f000 f8f8 	bl	8002ede <TIM_ITRx_SetConfig>
      break;
 8002cee:	e003      	b.n	8002cf8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8002cf4:	e000      	b.n	8002cf8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002cf6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr

08002d36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr

08002d48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	4770      	bx	lr
	...

08002d5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a2b      	ldr	r2, [pc, #172]	; (8002e1c <TIM_Base_SetConfig+0xc0>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d007      	beq.n	8002d84 <TIM_Base_SetConfig+0x28>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d7a:	d003      	beq.n	8002d84 <TIM_Base_SetConfig+0x28>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a28      	ldr	r2, [pc, #160]	; (8002e20 <TIM_Base_SetConfig+0xc4>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d108      	bne.n	8002d96 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a20      	ldr	r2, [pc, #128]	; (8002e1c <TIM_Base_SetConfig+0xc0>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d007      	beq.n	8002dae <TIM_Base_SetConfig+0x52>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da4:	d003      	beq.n	8002dae <TIM_Base_SetConfig+0x52>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a1d      	ldr	r2, [pc, #116]	; (8002e20 <TIM_Base_SetConfig+0xc4>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d108      	bne.n	8002dc0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002db4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a0d      	ldr	r2, [pc, #52]	; (8002e1c <TIM_Base_SetConfig+0xc0>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d103      	bne.n	8002df4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	691a      	ldr	r2, [r3, #16]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d005      	beq.n	8002e12 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	f023 0201 	bic.w	r2, r3, #1
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	611a      	str	r2, [r3, #16]
  }
}
 8002e12:	bf00      	nop
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr
 8002e1c:	40012c00 	.word	0x40012c00
 8002e20:	40000400 	.word	0x40000400

08002e24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	f023 0201 	bic.w	r2, r3, #1
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	011b      	lsls	r3, r3, #4
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f023 030a 	bic.w	r3, r3, #10
 8002e60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	621a      	str	r2, [r3, #32]
}
 8002e76:	bf00      	nop
 8002e78:	371c      	adds	r7, #28
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr

08002e80 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b087      	sub	sp, #28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	f023 0210 	bic.w	r2, r3, #16
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002eaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	031b      	lsls	r3, r3, #12
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ebc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	621a      	str	r2, [r3, #32]
}
 8002ed4:	bf00      	nop
 8002ed6:	371c      	adds	r7, #28
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bc80      	pop	{r7}
 8002edc:	4770      	bx	lr

08002ede <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b085      	sub	sp, #20
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
 8002ee6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ef4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	f043 0307 	orr.w	r3, r3, #7
 8002f00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	609a      	str	r2, [r3, #8]
}
 8002f08:	bf00      	nop
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr

08002f12 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b087      	sub	sp, #28
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	60f8      	str	r0, [r7, #12]
 8002f1a:	60b9      	str	r1, [r7, #8]
 8002f1c:	607a      	str	r2, [r7, #4]
 8002f1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f2c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	021a      	lsls	r2, r3, #8
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	431a      	orrs	r2, r3
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	609a      	str	r2, [r3, #8]
}
 8002f46:	bf00      	nop
 8002f48:	371c      	adds	r7, #28
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr

08002f50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d101      	bne.n	8002f68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f64:	2302      	movs	r3, #2
 8002f66:	e041      	b.n	8002fec <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2202      	movs	r2, #2
 8002f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a14      	ldr	r2, [pc, #80]	; (8002ff8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d009      	beq.n	8002fc0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb4:	d004      	beq.n	8002fc0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a10      	ldr	r2, [pc, #64]	; (8002ffc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d10c      	bne.n	8002fda <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fc6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	40012c00 	.word	0x40012c00
 8002ffc:	40000400 	.word	0x40000400

08003000 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	bc80      	pop	{r7}
 8003010:	4770      	bx	lr

08003012 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr

08003024 <__libc_init_array>:
 8003024:	b570      	push	{r4, r5, r6, lr}
 8003026:	2600      	movs	r6, #0
 8003028:	4d0c      	ldr	r5, [pc, #48]	; (800305c <__libc_init_array+0x38>)
 800302a:	4c0d      	ldr	r4, [pc, #52]	; (8003060 <__libc_init_array+0x3c>)
 800302c:	1b64      	subs	r4, r4, r5
 800302e:	10a4      	asrs	r4, r4, #2
 8003030:	42a6      	cmp	r6, r4
 8003032:	d109      	bne.n	8003048 <__libc_init_array+0x24>
 8003034:	f000 f822 	bl	800307c <_init>
 8003038:	2600      	movs	r6, #0
 800303a:	4d0a      	ldr	r5, [pc, #40]	; (8003064 <__libc_init_array+0x40>)
 800303c:	4c0a      	ldr	r4, [pc, #40]	; (8003068 <__libc_init_array+0x44>)
 800303e:	1b64      	subs	r4, r4, r5
 8003040:	10a4      	asrs	r4, r4, #2
 8003042:	42a6      	cmp	r6, r4
 8003044:	d105      	bne.n	8003052 <__libc_init_array+0x2e>
 8003046:	bd70      	pop	{r4, r5, r6, pc}
 8003048:	f855 3b04 	ldr.w	r3, [r5], #4
 800304c:	4798      	blx	r3
 800304e:	3601      	adds	r6, #1
 8003050:	e7ee      	b.n	8003030 <__libc_init_array+0xc>
 8003052:	f855 3b04 	ldr.w	r3, [r5], #4
 8003056:	4798      	blx	r3
 8003058:	3601      	adds	r6, #1
 800305a:	e7f2      	b.n	8003042 <__libc_init_array+0x1e>
 800305c:	080030b8 	.word	0x080030b8
 8003060:	080030b8 	.word	0x080030b8
 8003064:	080030b8 	.word	0x080030b8
 8003068:	080030bc 	.word	0x080030bc

0800306c <memset>:
 800306c:	4603      	mov	r3, r0
 800306e:	4402      	add	r2, r0
 8003070:	4293      	cmp	r3, r2
 8003072:	d100      	bne.n	8003076 <memset+0xa>
 8003074:	4770      	bx	lr
 8003076:	f803 1b01 	strb.w	r1, [r3], #1
 800307a:	e7f9      	b.n	8003070 <memset+0x4>

0800307c <_init>:
 800307c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800307e:	bf00      	nop
 8003080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003082:	bc08      	pop	{r3}
 8003084:	469e      	mov	lr, r3
 8003086:	4770      	bx	lr

08003088 <_fini>:
 8003088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800308a:	bf00      	nop
 800308c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800308e:	bc08      	pop	{r3}
 8003090:	469e      	mov	lr, r3
 8003092:	4770      	bx	lr
